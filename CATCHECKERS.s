# OAC - UNB - 1/2018
# Lucas Mafra 12/0126443
# Gabriel Bessa   16/0120811
# Thiago Veras  16/0146682
# Andrey Maz√©pas 16/0112362
# Matheus Lemos 16/0137969
.data


	VGAADDR: .word 0xFF000000
	VRAMPOINTER: .word	0xFF100000

	ERROR_EXIT_CODE: .byte 0x00
	random: .word 0
	.align 2
	pieces: 
		.byte 	0x80, 0x82, 0x84, 0x86, 0x89, 0x8b, 0x8d, 0x8f, 0x90, 0x92, 0x94, 0x96
			0x29, 0x2b, 0x2d, 0x2f, 0x30, 0x32, 0x34, 0x36, 0x39, 0x3b, 0x3d, 0x3f
	.align 2
	piecesStatus:
		.byte   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
	#####################################
	# initialized as blank, will be filled when the user select a piece
	cpupieceaddress: .word 0x00000000
	cpudameaddress: .word 0x00000000
	playerpieceaddress: .word 0x00000000
	playerdameaddress: .word 0x00000000
	#############################
	# piece sprites 

		playerpiece1: .byte
		  0x55,0x55,0x55,0x55,0x55,0x55,0x5F,0x55,
		  0x70,0xD5,0x70,0x35,0x70,0x0F,0x70,0x00,
		  0xC0,0x00,0xC0,0x30,0xC0,0xF0,0xCA,0x00,
		  0xCA,0x30,0x70,0x3F,0x5C,0x00,0x57,0xFF,
		  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xF5,
		  0x57,0x0D,0x5C,0x0D,0xF0,0x0D,0x00,0x0D,
		  0x00,0x03,0x00,0xC3,0x33,0xC3,0x00,0x2B,
		  0xC3,0x2B,0xFF,0x0D,0x00,0x35,0xFF,0xD5
		playerpiece1palette: .word 0xFF00FFFF
		playerpiece1address: .word 0x00000000

		cpupiece1: .byte
		  0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,
		  0x3A,0xC0,0x3A,0xB0,0x3A,0xAF,0x3A,0xAA,
		  0xEA,0xAA,0xEA,0x7A,0xEA,0xFA,0xE5,0xAA,
		  0xE5,0xBA,0x3A,0xBF,0x0E,0xAA,0x03,0xFF,
		  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,
		  0x03,0xAC,0x0E,0xAC,0xFA,0xAC,0xAA,0xAC,
		  0xAA,0xAB,0xA9,0xEB,0xBB,0xEB,0xAA,0x97,
		  0xEB,0x97,0xFF,0xAC,0xAA,0xB0,0xFF,0xC0
		cpupiece1palette: .word 0x00FFFFFF
		cpupiece1address: .word 0x00000000

		playerpiece2: .byte
		  0x55,0x55,0x57,0x55,0x5C,0xD5,0x5C,0x35,
		  0x70,0x0F,0x70,0x00,0x70,0x00,0xC3,0xF0,
		  0xCC,0xCC,0xC3,0xF0,0xC0,0x03,0xC0,0x33,
		  0xC0,0x0C,0x70,0x00,0x5F,0x00,0x55,0xFF,
		  0x55,0x55,0x55,0xD5,0x57,0x35,0x5C,0x35,
		  0xF0,0x0D,0x00,0x0D,0x00,0x0D,0x0F,0xC3,
		  0x33,0x33,0x0F,0xC3,0x00,0x03,0x30,0x03,
		  0xC0,0x03,0x00,0x0D,0x00,0xF5,0xFF,0x55
		playerpiece2palette: .word 0xFF00FFFF
		playerpiece2address: .word 0x00000000

		cpupiece2: .byte
		  0xAA,0xAA,0xAB,0xAA,0xAD,0xEA,0xAD,0x7A,
		  0xB5,0x5F,0xB5,0x55,0xB5,0x55,0xD7,0xF5,
		  0xDC,0xCD,0xD7,0xF5,0xD5,0x57,0xD5,0x77,
		  0xD5,0x5D,0xB5,0x55,0xAF,0x55,0xAA,0xFF,
		  0xAA,0xAA,0xAA,0xEA,0xAB,0x7A,0xAD,0x7A,
		  0xF5,0x5E,0x55,0x5E,0x55,0x5E,0x5F,0xD7,
		  0x73,0x37,0x5F,0xD7,0x55,0x57,0x75,0x57,
		  0xD5,0x57,0x55,0x5E,0x55,0xFA,0xFF,0xAA
		cpupiece2palette: .word 0xFFFF00FF
		cpupiece2address: .word 0x00000000

		cpupiece3: .byte
		  0x00,0x30,0x00,0xDC,0x00,0xDB,0x03,0x96,
		  0x03,0x55,0x0E,0x5D,0x0D,0x65,0x39,0x57,
		  0x39,0x55,0x35,0x55,0xE9,0x55,0xE5,0xD5,
		  0xD5,0xDD,0xE5,0xDD,0x39,0xDD,0x0F,0xFF,
		  0x0C,0x00,0x37,0x00,0xE7,0x00,0x96,0xC0,
		  0x55,0xC0,0x5D,0xB0,0xD6,0x70,0x75,0x70,
		  0x55,0x6C,0x55,0x6C,0x55,0x5C,0x57,0x6B,
		  0x77,0x5B,0x77,0x57,0x77,0x6C,0xFF,0xF0
		cpupiece3palette: .word 0x00FFFFFF
		cpupiece3address: .word 0x00000000

		playerpiece3: .byte
		  0x55,0x75,0x55,0xCD,0x55,0xCB,0x57,0x82,
		  0x57,0x00,0x5E,0x0C,0x5C,0x20,0x78,0x03,
		  0x78,0x00,0x70,0x00,0xE8,0x00,0xE0,0xC0,
		  0xC0,0xCC,0xE0,0xCC,0x78,0xCC,0x5F,0xFF,
		  0x5D,0x55,0x73,0x55,0xE3,0x55,0x82,0xD5,
		  0x00,0xD5,0x0C,0xB5,0xC2,0x35,0x30,0x35,
		  0x00,0x2D,0x00,0x2D,0x00,0x0D,0x03,0x2B,
		  0x33,0x0B,0x33,0x03,0x33,0x2D,0xFF,0xF5
		playerpiece3palette: .word 0xFF00FFFF
		playerpiece3address: .word 0x00000000

		playerpiece2dame: .byte
		  0x55,0x55,0x57,0x55,0x5C,0xD5,0x5C,0x35,
		  0x70,0x0F,0x70,0x00,0x70,0x00,0xFF,0xCF,
		  0xCF,0x3C,0xC3,0xF0,0xC0,0x03,0xC0,0x33,
		  0xC0,0x0C,0x70,0x00,0x5F,0x00,0x55,0xFF,
		  0x55,0x55,0x55,0xD5,0x57,0x35,0x5C,0x35,
		  0xF0,0x0D,0x00,0x0D,0x00,0x0D,0xFF,0x3F,
		  0x3C,0xF3,0x0F,0xC3,0x00,0x03,0x30,0x03,
		  0xC0,0x03,0x00,0x0D,0x00,0xF5,0xFF,0x55
		playerpiece2damepalette: .word 0xFF00FFFF
		playerpiece2dameaddress: .word 0x00000000

		cpupiece2dame: .byte
		  0xAA,0xAA,0xAB,0xAA,0xAD,0xEA,0xAD,0x7A,
		  0xB5,0x5F,0xB5,0x55,0xB5,0x55,0xFF,0xCF,
		  0xDF,0x3D,0xD7,0xF5,0xD5,0x57,0xD5,0x77,
		  0xD5,0x5D,0xB5,0x55,0xAF,0x55,0xAA,0xFF,
		  0xAA,0xAA,0xAA,0xEA,0xAB,0x7A,0xAD,0x7A,
		  0xF5,0x5E,0x55,0x5E,0x55,0x5E,0xFF,0x3F,
		  0x7C,0xF7,0x5F,0xD7,0x55,0x57,0x75,0x57,
		  0xD5,0x57,0x55,0x5E,0x55,0xFA,0xFF,0xAA
		cpupiece2damepalette: .word 0xFFFF00FF
		cpupiece2dameaddress: .word 0x00000000


		cpupiece3dame: .byte
		  0x00,0x30,0x00,0xDC,0x00,0xDB,0x03,0x96,
		  0x03,0xFF,0x0E,0xFD,0x0D,0x65,0x39,0x57,
		  0x39,0x55,0x35,0x55,0xE9,0x55,0xE5,0xD5,
		  0xD5,0xDD,0xE5,0xDD,0x39,0xDD,0x0F,0xFF,
		  0x0C,0x00,0x37,0x00,0xE7,0x00,0x96,0xC0,
		  0xFF,0xC0,0x7F,0xB0,0xD6,0x70,0x75,0x70,
		  0x55,0x6C,0x55,0x6C,0x55,0x5C,0x57,0x6B,
		  0x77,0x5B,0x77,0x57,0x77,0x6C,0xFF,0xF0
		cpupiece3damepalette: .word 0x00FFFFFF
		cpupiece3dameaddress: .word 0x00000000

		playerpiece3dame: .byte
		  0x55,0x75,0x55,0xCD,0x55,0xCB,0x57,0x82,
		  0x57,0xFF,0x5E,0xFC,0x5C,0x20,0x78,0x03,
		  0x78,0x00,0x70,0x00,0xE8,0x00,0xE0,0xC0,
		  0xC0,0xCC,0xE0,0xCC,0x78,0xCC,0x5F,0xFF,
		  0x5D,0x55,0x73,0x55,0xE3,0x55,0x82,0xD5,
		  0xFF,0xD5,0x3F,0xB5,0xC2,0x35,0x30,0x35,
		  0x00,0x2D,0x00,0x2D,0x00,0x0D,0x03,0x2B,
		  0x33,0x0B,0x33,0x03,0x33,0x2D,0xFF,0xF5
		playerpiece3damepalette: .word 0xFF00FFFF
		playerpiece3dameaddress: .word 0x00000000

		playerpiece1dame: .byte
		  0x55,0x55,0x55,0x55,0x55,0x55,0x5F,0x55,
		  0x70,0xD5,0x70,0x35,0x70,0x0F,0x70,0x00,
		  0xFF,0xCF,0xCF,0x3C,0xC3,0xF0,0xCA,0x00,
		  0xCA,0x30,0x70,0x3F,0x5C,0x00,0x57,0xFF,
		  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0xF5,
		  0x57,0x0D,0x5C,0x0D,0xF0,0x0D,0x00,0x0D,
		  0xFF,0xCF,0x0F,0x3F,0x33,0xF3,0x00,0x2B,
		  0xC3,0x2B,0xFF,0x0D,0x00,0x35,0xFF,0xD5
		playerpiece1damepalette: .word 0xFF00FFFF
		playerpiece1dameaddress: .word 0x00000000

		cpupiece1dame: .byte
		  0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,
		  0x3A,0xC0,0x3A,0xB0,0x3A,0xAF,0x3A,0xAA,
		  0xFD,0xFF,0xEF,0x7E,0xEB,0xFA,0xE5,0xAA,
		  0xE5,0xBA,0x3A,0xBF,0x0E,0xAA,0x03,0xFF,
		  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,
		  0x03,0xAC,0x0E,0xAC,0xFA,0xAC,0xAA,0xAC,
		  0xFD,0xFF,0xAF,0x7F,0xBB,0xFB,0xAA,0x97,
		  0xEB,0x97,0xFF,0xAC,0xAA,0xB0,0xFF,0xC0
		cpupiece1damepalette: .word 0x00FFFFFF
		cpupiece1dameaddress: .word 0x00000000
	# end piece sprites 
	playerCursor:
		.byte 0x55,0x7F,0x55,0xC3,0x57,0xC3,0x5C,0x3F,
  0x5C,0x30,0x5F,0xC0,0x57,0x00,0x57,0x00,
  0x57,0xC3,0x55,0xFD,0x55,0x55,0x55,0x55,
  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
  0xF5,0x55,0x0D,0x55,0x0F,0x55,0xF0,0xD5,
  0x30,0xD5,0x0F,0xD5,0x03,0x55,0x03,0x55,
  0x0F,0x55,0xFD,0x55,0x55,0x55,0x55,0x55,
  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55
	playerCursorPalette: .word 0xFF00FFFF
	playerCursorAddress: .word 0x00000000
	playerCursorPosition: .word 0xff0113A0
	playerCursorDefaultPos: .word 0xff0113A0
	#############################
	CPUCursor:
		.byte 0x00,0x15,0x00,0x7D,0x01,0x7D,0x07,0xD5,
  0x07,0xDF,0x05,0x7F,0x01,0xFF,0x01,0xFF,
  0x01,0x7D,0x00,0x54,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x50,0x00,0xF4,0x00,0xF5,0x00,0x5F,0x40,
  0xDF,0x40,0xF5,0x40,0xFD,0x00,0xFD,0x00,
  0xF5,0x00,0x54,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	CPUCursorPalette: .word 0x00FF00FF
	CPUCursorAddress: .word 0x00000000
	CPUCursorPosition: .word 0xFF0000A0
	CPUCursorDefaultPos: .word 0xFF0000A0
	##############################
	boarddrawaddresses: 
		.word 0xFF0034B7, 0xFF0034D2, 0xFF0034ED, 0xFF003507, 0xFF003523, 0xFF00353C, 0xFF003559, 0xFF003572,
			0xFF004633, 0xFF004650, 0xFF00466C, 0xFF004689, 0xFF0046A2, 0xFF0046BF, 0xFF0046D9, 0xFF0046F7,
			0xFF0057B1, 0xFF0057CE, 0xFF0057EB, 0xFF005807, 0xFF005824, 0xFF00583F, 0xFF00585C, 0xFF005876,
			0xFF006A6E, 0xFF006A8C, 0xFF006AA9, 0xFF006AC5, 0xFF006AE2, 0xFF006B01, 0xFF006B1D, 0xFF006B3A,
			0xFF007BEB, 0xFF007C09, 0xFF007C27, 0xFF007C45, 0xFF007C63, 0xFF007C81, 0xFF007C9E, 0xFF007CBF,
			0xFF009129, 0xFF009149, 0xFF009167, 0xFF009187, 0xFF0091A4, 0xFF0091C3, 0xFF0091E2, 0xFF009200,
			0xFF00A665, 0xFF00A686, 0xFF00A6A6, 0xFF00A6C6, 0xFF00A6E5, 0xFF00A705, 0xFF00A724, 0xFF00A745,
			0xFF00BCE2, 0xFF00BD03, 0xFF00BD25, 0xFF00BD44, 0xFF00BD64, 0xFF00BD86, 0xFF00BDA6, 0xFF00BDC9
	board: 
		.byte 		0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00
				0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08
				0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0x0C, 0x00
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	COLOR_PALETTE: .word 0xFE74A200
	movingPiecePosition: .word 0xff000000
	selectedcursorpos: .word 0xff006400
	.eqv VGAADDRESSINI      0xFF000000
	.eqv VGAADDRESSFIM      0xFF012C00
	.eqv BG1ADDRESSINI	0xFF012C00
	.eqv BG2ADDRESSINI	0xFF025800
	.eqv FRAMEWAIT		15

	#forgive me father for i have sinned
	boardBG: 
		.word 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000AAA, 0x00002AAA, 0x00002AAA, 0x00002AAA, 0x00002AAA, 0x00005555, 
		0x0000AAAA, 0x0000AAAA, 0x0000AAAA, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0xA9AAAAAA, 0xA5AAAAAA, 0xA5AAAAAA, 0xA5AAAAAA, 0xA6AAAAAA, 0x55555555, 0x97FFFFFF, 0x97FFFFFF, 
		0x97FFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0x55555555, 0xAAAAAFFF, 0xAAAABFFF, 0xAAAABFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0x55555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 
		0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xAABFFFFF, 0xAABFFFFF, 0xAABFFFFF, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0xAAAAA6AA, 0xAAAAA5AA, 0xAAAAA5AA, 0xAAAAA5AA, 0xAAAAA9AA, 0x55555555, 0xAAAAA56A, 
		0xAAAAA96A, 0xAAAAA96A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0xAAA00000, 0xAAA00000, 0xAAA00000, 0xAAA80000, 0xAAA80000, 0x55540000, 0xAAA80000, 0xAAAA0000, 0xAAAA0000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x0002AAAA, 0x0002AAAA, 0x0002AAAA, 0x0002AAAA, 0x0002AAAA, 0x000AAAAA, 0x000AAAA9, 0x000AAAA9, 
		0x000AAAA9, 0x002AAAA9, 0x002AAAA9, 0x002AAAA5, 0x002AAAA5, 0x00AAAAA5, 0x00AAAAA5, 0x00AAAA95, 0x97FFFFFF, 
		0x5BFFFFFF, 0x5FFFFFFF, 0x5FFFFFFF, 0x5FFFFFFF, 0x5FFFFFFF, 0x6FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 
		0x6AAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 
		0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xAAAAAABF, 0xAAAAAABF, 
		0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xAAAABFFF, 0xAAAABFFF, 0xAAAABFFF, 0xAAAABFFF, 0xAAAABFFF, 0xAAAABFFF, 0xAAAABFFF, 
		0xAAAABFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xFFFFAAAA, 0xFFFFAAAA, 0xFFFFAAAA, 0xFFFFAAAA, 0xFFFFAAAA, 0xFFFFAAAA, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 
		0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xAAFFFFFF, 
		0xAAFFFFFF, 0xAAFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFEAA, 0xFFFFFEAA, 0xFFFFFEAA, 0xFFFFFEAA, 0xFFFFFEAA, 0xFFFFFEAA, 
		0xFFFFFEAA, 0xFFFFFEAA, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAABFFFFF, 0xAABFFFFF, 0xAABFFFFF, 
		0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xFFFEAAAA, 0xFFFEAAAA, 
		0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 
		0xEAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xABFFFFFF, 
		0xAAAAA96A, 0xAAAAAA5A, 0xAAAAAA5A, 0xAAAAAA5A, 0xAAAAAA5A, 0xAAAAAA5A, 0xAAAAAA96, 0xAAAAAA96, 0xAAAAAA96, 
		0xAAAAAA96, 0xFFFFFFE6, 0xFFFFFFF5, 0xFFFFFFF5, 0xFFFFFFF5, 0xFFFFFFF5, 0xFFFFFFF9, 0xAAAA0000, 0xAAAA0000, 
		0xAAAA0000, 0xAAAA8000, 0xAAAA8000, 0xAAAA8000, 0xAAAA8000, 0xAAAAA000, 0xAAAAA000, 0xAAAAA000, 0xAAAAA000, 
		0xAAAAA800, 0xAAAAA800, 0xAAAAA800, 0xAAAAA800, 0x6AAAA800, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00AAAA96, 0x02AAAA96, 0x02AAAA96, 
		0x02AAAA96, 0x02AAAA56, 0x0AAAAA5A, 0x0AAAAA5A, 0x0AAAAA5A, 0x0AAAAA5F, 0x2AAAA96F, 0x2AAAA97F, 0x2AAAA97F, 
		0x2AAAA97F, 0x2AAAA97F, 0xAAAAA57F, 0xAAAAA5BF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 
		0xAAAAABFF, 0xFFFFFEAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFAAAA, 0xFFFFAAAA, 
		0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xAAABFFFF, 0xAAABFFFF, 0xAAABFFFF, 
		0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 
		0xABFFFFFF, 0xABFFFFFF, 0xFEAAAAAA, 0xFEAAAAAA, 0xFEAAAAAA, 0xFEAAAAAA, 0xFEAAAAAA, 0xFEAAAAAA, 0xFEAAAAAA, 
		0xFEAAAAAA, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 
		0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 
		0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFEAAAA, 0xFFFFAAAA, 0xFFFFAAAA, 
		0xFFFFAAAA, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 
		0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xAAFFFFFF, 0xAAFFFFFF, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 
		0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFFFFFFD, 0xFFFFFFFD, 0xFFFFFFFD, 0xFFFFFFFD, 
		0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x6AAAAA00, 0x6AAAAA00, 0x6AAAAA00, 0x6AAAAA00, 0x5AAAAA80, 0x5AAAAA80, 
		0x5AAAAA80, 0x5AAAAA80, 0x5AAAAAA0, 0x96AAAAA0, 0x96AAAAA0, 0x96AAAAA0, 0x96AAAAA0, 0x96AAAAA8, 0xA5AAAAA8, 
		0xA5AAAAA8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x00000002, 0x00000002, 
		0x00000002, 0x0000000A, 0x0000000A, 0x0000000A, 0x0000000A, 0x0000000A, 0x0000002A, 0x0000002A, 0x0000002A, 
		0x0000002A, 0x000000AA, 0xAAAAA5FF, 0xAAAAA5FF, 0xAAAAA5FF, 0xAAAA96FF, 0xAAAA97FF, 0xAAAA97FF, 0xAAAA97FF, 
		0xAAAA56AA, 0xAAAA5AAA, 0xAAAA5AAA, 0xAAAA5AAA, 0xAAAA5AAA, 0xAAA95AAA, 0xAAA96AAA, 0xAAA96AAA, 0xAAA96AAA, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFEAAA, 0xFFFFEAAA, 
		0xFFFFEAAA, 0xFFFFEAAA, 0xFFFFEAAA, 0xFFFFEAAA, 0xFFFFEAAA, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 
		0xAAAAFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xAABFFFFF, 
		0xAABFFFFF, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 
		0xFFAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFEAAAAAA, 
		0xFEAAAAAA, 0xFEAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 
		0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 0xFFFFFFAA, 
		0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAABFFF, 0xAAAABFFF, 
		0xAAAABFFF, 0xAAAABFFF, 0xAAAABFFF, 0xAAAABFFF, 0xAAAABFFF, 0xFFFFEAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 
		0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFFAAAAA, 0xFFFAAAAA, 0xFFFAAAAA, 0xFFFAAAAA, 
		0xFFFAAAAA, 0xAAAFFFFF, 0xAAAFFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAABFFFF, 
		0xAAABFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xA5AAAAA8, 
		0xA5AAAAAA, 0xA56AAAAA, 0xA96AAAAA, 0xA96AAAAA, 0xA96AAAAA, 0xA96AAAAA, 0xFE6AAAAA, 0xFF5AAAAA, 0xFF5AAAAA, 
		0xFF5AAAAA, 0xFF5AAAAA, 0xFF96AAAA, 0xFFD6AAAA, 0xFFD6AAAA, 0xFFD6AAAA, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0x80000000, 0xA0000000, 0xA0000000, 
		0xA0000000, 0xA0000000, 0xA8000000, 0xA8000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x000000AA, 0x000000AA, 0x000000AA, 0x000002AA, 0x000002AA, 0x000002AA, 0x000002AA, 0x00000AAA, 0x00000AAA, 
		0x00000AAA, 0x00000AAA, 0x00002AAA, 0x00002AAA, 0x00002AAA, 0x00002AAA, 0x0000AAAA, 0xAAA96AAA, 0xAAA56AAA, 
		0xAAA5AAAA, 0xAAA5AAAA, 0xAAA5AAAA, 0xAA95FFFF, 0xAA95FFFF, 0xAA96FFFF, 0xAA97FFFF, 0xAA97FFFF, 0xAA57FFFF, 
		0xAA5BFFFF, 0xAA5FFFFF, 0xAA5FFFFF, 0xAA5FFFFF, 0xA95FFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAABFFFF, 0xAAAFFFFF, 0xAAAFFFFF, 0xFFFAAAAA, 
		0xFFFAAAAA, 0xFFFAAAAA, 0xFFFAAAAA, 0xFFFAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 0xFFEAAAAA, 
		0xFFEAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFAAAAAA, 
		0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xAAFFFFFF, 0xAAFFFFFF, 0xAAFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 
		0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xBFFFFFFF, 
		0xFAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 
		0xEAAAAAAA, 0xEAAAAAAA, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAABF, 0xAAAAAABF, 
		0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 
		0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFEAA, 0xFFFFFEAA, 0xFFFFFEAA, 0xAAAAABFF, 
		0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAAAFF, 0xAAAAAAFF, 
		0xAAAAAAFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAFFFF, 
		0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xAAAAFFFF, 0xFFFFEAAA, 0xFFFFEAAA, 0xFFFFEAAA, 0xFFFFEAAA, 0xFFFFEAAA, 
		0xFFFFEAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFD5AAAA, 0xFFE5AAAA, 0xFFF5AAAA, 0xFFF5AAAA, 0xFFF56AAA, 
		0xAAA96AAA, 0xAAA96AAA, 0xAAA96AAA, 0xAAA96AAA, 0xAAA96AAA, 0xAAA95AAA, 0xAAAA5AAA, 0xAAAA5AAA, 0xAAAA5AAA, 
		0xAAAA56AA, 0xAAAA96AA, 0xA8000000, 0xA8000000, 0xAA000000, 0xAA000000, 0xAA000000, 0xAA000000, 0xAA800000, 
		0xAA800000, 0xAA800000, 0xAA800000, 0xAA800000, 0xAAA00000, 0xAAA00000, 0xAAA00000, 0xAAA00000, 0xAAA80000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000AAAA, 0x0000AAAA, 0x0000AAAA, 0x0000AAAA, 
		0x0002AAAA, 0x0002AAAA, 0x0002AAAA, 0x0002AAAA, 0x000AAAAA, 0x000AAAAA, 0x000AAAAA, 0x000AAAAA, 0x002AAAAA, 
		0x002AAAAA, 0x002AAAAA, 0x002AAAAA, 0xA96FFFFF, 0xA97FFFFF, 0xA97FFFFF, 0xA97FFFFF, 0xA57FFFFF, 0xA57FFFFF, 
		0xA5AAAAAA, 0xA5AAAAAA, 0x95AAAAAA, 0x95AAAAAA, 0x96AAAAAA, 0x96AAAAAA, 0x96AAAAAA, 0x56AAAAAA, 0x56AAAAAA, 
		0x5AAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFAAAAAA, 
		0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xFFAAAAAA, 0xAAFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 
		0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xABFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 
		0xAFFFFFFF, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xEAAAAAAA, 
		0xEAAAAAAA, 0xEAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xBFFFFFFF, 0xBFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 
		0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 
		0xAAAAAAAF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAFF, 
		0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 
		0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFFA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFAAA, 0xFFFFFAAA, 0xFFFFFEAA, 0xFFFFFEAA, 0xFFFFFEAA, 
		0xFFFFFEAA, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAABFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 
		0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xAAAA96AA, 0xAAAA96AA, 0xAAAA96AA, 0xAAAA96AA, 0xAAAA95AA, 0xAAAAA5AA, 0xFFFFF5AA, 0xFFFFF5AA, 0xFFFFF56A, 
		0xFFFFF96A, 0xFFFFFD6A, 0xFFFFFD6A, 0xFFFFFD6A, 0xFFFFFD5A, 0xFFFFFF5A, 0xFFFFFF5A, 0xAAA80000, 0xAAA80000, 
		0xAAA80000, 0xAAA80000, 0xAAAA0000, 0xAAAA0000, 0xAAAA0000, 0xAAAA0000, 0xAAAA8000, 0xAAAA8000, 0xAAAA8000, 
		0xAAAA8000, 0xAAAAA000, 0xAAAAA000, 0xAAAAA000, 0xAAAAA000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x002AAAAA, 0x00AAAAAA, 0x00AAAAA9, 0x00AAAAA9, 0x00AAAAA9, 0x02AAAAA9, 0x02AAAAA5, 0x02AAAAA5, 
		0x02AAAAA5, 0x0AAAAAA5, 0x0AAAAAA5, 0x0AAAAA95, 0x0AAAAA95, 0x2AAAAA96, 0x2AAAAA97, 0x2AAAAA97, 0x5AAAAAAA, 
		0x5AAAAAAA, 0x5AAAAAAA, 0x5AAAAAAA, 0x6AAAAAAA, 0x6AAAAAAA, 0x6AAAAAAA, 0x7FFFFFFF, 0x7FFFFFFF, 0xBFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xBFFFFFFF, 0xBFFFFFFF, 
		0xBFFFFFFF, 0xBFFFFFFF, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAB, 
		0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xFFFFFFFE, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAB, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAF, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 
		0xFFFFFFFA, 0xFFFFFFFA, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 0xAAAAAAAF, 0xFFFFFFFA, 0xFFFFFFFA, 
		0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFF5A, 0xFFFFFF96, 0xFFFFFF96, 0xFFFFFFD6, 
		0xFFFFFFD6, 0xFFFFFFD6, 0xFFFFFFD5, 0xAAAAAA95, 0xAAAAAAA5, 0xAAAAAAA9, 0xAAAAAAA9, 0xAAAAAAA5, 0xAAAAAAA5, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAA9, 0xAAAAA800, 0xAAAAA800, 0xAAAAA800, 0xAAAAA800, 0xAAAAA800, 0xAAAAAA00, 
		0xAAAAAA00, 0xAAAAAA00, 0xAAAAAA00, 0xAAAAAA80, 0xAAAAAA80, 0x6AAAAA80, 0x6AAAAA80, 0x6AAAAAA0, 0x6AAAAAA0, 
		0x5AAAAAA0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x00000002, 0x00000002, 0x00000002, 0x00000002, 
		0x0000000A, 0x0000000A, 0x0000000A, 0x0000000A, 0x0000002A, 0x0000002A, 0x2AAAAA57, 0xAAAAAA57, 0xAAAAAA5B, 
		0xAAAAAA5F, 0xAAAAAA5F, 0xAAAAA95F, 0xAAAAA95F, 0xAAAAA96F, 0xAAAAA96F, 0xAAAAA56A, 0xAAAAA66A, 0xAAAAA66A, 
		0xAAAAA56A, 0xAAAAA5AA, 0xAAAA95AA, 0xAAAA99AA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xFFFFFFFA, 0xFFFFFFFA, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAABF, 0xAAAAAABF, 0xAAAAAABF, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xFFFFFFFE, 0xFFFFFFFA, 
		0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 
		0xAAAAAAAF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAB, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xFFFFFFFE, 
		0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAB, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xBFFFFFFF, 0xBFFFFFFF, 0xBFFFFFFF, 0xBFFFFFFF, 0xBFFFFFFF, 
		0xBFFFFFFF, 0xAAAAAAA9, 0xAAAAAAA9, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x5AAAAAA0, 
		0x5AAAAAA0, 0x5AAAAAA8, 0x5AAAAAA8, 0x56AAAAA8, 0x56AAAAA8, 0x66AAAAAA, 0xA6AAAAAA, 0x96AAAAAA, 0xD5AAAAAA, 
		0xD5AAAAAA, 0xE9AAAAAA, 0xF9AAAAAA, 0xF5AAAAAA, 0xF56AAAAA, 0xF96AAAAA, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 
		0x80000000, 0x80000000, 0x80000000, 0xA0000000, 0x0000002A, 0x0000002A, 0x0000002A, 0x000000AA, 0x000000AA, 
		0x000000AA, 0x000000AA, 0x000002AA, 0x000002AA, 0x000002AA, 0x000002AA, 0x00000555, 0x000002AA, 0x00000AAA, 
		0x00000AAA, 0x00002AAA, 0xAAAA99AA, 0xAAAA96AA, 0xAAAA56AA, 0xAAAA56AA, 0xAAAA56AA, 0xAAAA56AA, 0xAAA95AAA, 
		0xAAA95AAA, 0xAAA95AAA, 0xAAA95AAA, 0xAAA95AAA, 0x55555555, 0xAAAA5555, 0xAAA6AAAA, 0xAA95AAAA, 0xAA95AAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAABF, 0xAAAAAABF, 
		0xAAAAAABF, 0xAAAAAABF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAAAFF, 0xAAAAABFF, 
		0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x55555555, 0x55555555, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFFA, 0xFFFFFFEA, 0xFFFFFFEA, 
		0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0xFFFFFFEA, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAF, 
		0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 
		0xAAAAAAAF, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x55555555, 
		0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 
		0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0xFFFFFFFE, 0x55555555, 0x55555555, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xBFFFFFFF, 0xBFFFFFFF, 0xBFFFFFFF, 0xBFFFFFFF, 
		0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x55555555, 0x55555555, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 
		0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFAAAAAAA, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAFFFFFFF, 
		0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xAFFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 0xABFFFFFF, 
		0xABFFFFFF, 0x55555555, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x55555555, 
		0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xFD6AAAAA, 0xFE6AAAAA, 0xFD6AAAAA, 0xFD5AAAAA, 0xFE9AAAAA, 
		0xFF9AAAAA, 0xFF5AAAAA, 0xFF56AAAA, 0xFF66AAAA, 0xFFA6AAAA, 0xFFE6AAAA, 0x55555555, 0x5556AAAA, 0xAA95AAAA, 
		0xAA95AAAA, 0xAAA5AAAA, 0xA0000000, 0xA0000000, 0xA0000000, 0xA8000000, 0xA8000000, 0xA8000000, 0xA8000000, 
		0xAA000000, 0xAA000000, 0xAA000000, 0xAA000000, 0x55400000, 0xAA000000, 0xAA800000, 0xAA800000, 0xAA800000, 
		0x00002AAA, 0x00002AAA, 0x00002AAA, 0x0000AAAA, 0x0000AAAA, 0x0000AAAA, 0x00005555, 0x0000A595, 0x0000A595, 
		0x00001595, 0x00001595, 0x00002695, 0x00001655, 0x00000955, 0x00000559, 0x00000559, 0xAA96AAAA, 0xAA9AAAAA, 
		0xAA5AAAAA, 0xAA56AAAA, 0xAA56AAAA, 0xAA5AAAAA, 0x55555555, 0x969A9555, 0x96969555, 0x96A6A555, 0x9695A555, 
		0x5695A955, 0x56566955, 0x55556A55, 0x56555A55, 0x5A555A95, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x59595955, 0x5A595955, 0x56555555, 0x56555655, 0x56955655, 0x55955559, 
		0x55A55555, 0x55655595, 0x55655555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0x55555555, 0x555556A6, 0x655556A6, 0x555655A6, 0x55565556, 0x59555556, 0x69555556, 0x65555556, 0x56655555, 
		0x55655555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0xAA556AA5, 
		0xAA556AA5, 0xAA555A95, 0xAA555695, 0xA955A595, 0xA955A955, 0xA955AA55, 0xA956A955, 0x6556A655, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x5A5AAA56, 0x5A5AA956, 0x595AA556, 
		0x595AA556, 0x5556A556, 0x5555A556, 0x55595556, 0x55555556, 0x55A95556, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x95656965, 0x95656965, 0x55656965, 0x55656965, 0x55656965, 
		0x55A56965, 0x55A56955, 0x55A56955, 0x55A55955, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0x55555555, 0x559A956A, 0x559A9556, 0x559A9556, 0x559A5555, 0x559A5556, 0x559A5595, 0x559A5595, 
		0x559A5595, 0x559A5555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 
		0xAAA96569, 0xAAA9555A, 0xAAAA5556, 0xAAAA5656, 0xA6AA9555, 0x6AAA9595, 0x6956A565, 0x6956A565, 0x5955A959, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x556A9555, 0x565A9555, 
		0x9556A555, 0x9596A555, 0xA565A955, 0xA965AA55, 0x69596A55, 0x5A5A5A55, 0x59665A95, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x5555559A, 0x5566555A, 0x5555566A, 0x559955AA, 
		0x5555596A, 0x6655559A, 0x555565A9, 0x95955669, 0x55555555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x65569555, 0x65569555, 0xA5565555, 0x95555555, 0x55555955, 0x95555995, 
		0x55A55595, 0x55A56695, 0x55A56695, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0x55555555, 0x9A555A59, 0x9A555A59, 0x9A555A59, 0x9A555A59, 0x5A555A59, 0x5A555A59, 0x5A555A59, 0x5A555A59, 
		0x5A555A99, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x55555595, 
		0x55555595, 0x55555595, 0x55555595, 0x55555595, 0x55555595, 0x55555595, 0x55555595, 0x55555596, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x9A555555, 0x59595555, 0x59595565, 
		0x59595565, 0x59555565, 0x59555555, 0x59955555, 0x59965555, 0x59565555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 0x55A95555, 0x55695555, 0x55695555, 0x55595555, 0x555A5555, 
		0x555A5555, 0x555A5555, 0x555A5555, 0x55965555, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0x55555555, 0x55556A55, 0x59555A55, 0x59555955, 0x55559555, 0x55556555, 0x55556955, 0x65556955, 
		0x65555556, 0x55555556, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x55555555, 
		0x559555A5, 0x55A55565, 0x55655696, 0x56555696, 0x56559695, 0x56959559, 0x5A955559, 0x55555555, 0x65555555, 
		0xAAA9AAAA, 0xAAA56AAA, 0xAAA56AAA, 0xAAA96AAA, 0xAAAA6AAA, 0xAAA95AAA, 0x55555555, 0x55569A56, 0x55569A56, 
		0x59569695, 0x5A569695, 0x6A96A595, 0x6A96A595, 0x6A56A5A5, 0x6A56A965, 0x6A5AA965, 0xAAA00000, 0xAAA00000, 
		0xAAA00000, 0xAAA00000, 0xAAA80000, 0xAAA80000, 0x55540000, 0xA6680000, 0xA5980000, 0x95980000, 0xA6900000, 
		0xA6500000, 0x66500000, 0x66500000, 0x69400000, 0x59400000,
	boardBGPalette: .word 0x00FFFFFF
	boardBG_address: .word 0x00000000

	font16_16: .word
		0xFFFFFFFF, 0xFFFD5FFF, 0xFFF557FF, 0xFFD7F5FF, 0xFFD7F5FF, 0xFFD7F5FF, 0xFF55557F, 0xFD00001F, 0xFD03F01F, 
		0xFD03F01F, 0xFD00C01F, 0xFD00001F, 0xFD00001F, 0xFF55557F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF0000FF, 0xFF0000FF, 
		0xF000000F, 0xF000000F, 0x00F00F00, 0x00F00F00, 0x00000000, 0x00000000, 0x05555550, 0x05555550, 0x555FF555, 
		0x555FF555, 0xF555555F, 0xF555555F, 0xFF5555FF, 0xFF5555FF, 0xFF0055FF, 0xFF0055FF, 0xF000555F, 0xF000555F, 
		0x00005555, 0x00005555, 0x00005555, 0x00005555, 0x00FFFF05, 0x00FFFF05, 0x000FF055, 0x000FF055, 0x000FF055, 
		0x000FF055, 0xF00FF05F, 0xF00FF05F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC03C03F, 0xFC03C03F, 0xC0000157, 
		0xC0000157, 0xC0000157, 0xC0000157, 0xFC00157F, 0xFC00157F, 0xFFC017FF, 0xFFC017FF, 0xFFFD7FFF, 0xFFFD7FFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFC017FF, 0xFFC017FF, 0xFC00157F, 0xFC00157F, 0xC0000157, 
		0xC0000157, 0xFC00157F, 0xFC00157F, 0xFFC017FF, 0xFFC017FF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFC017FF, 0xFFC017FF, 0xFC3D7C3F, 0xFC3D7C3F, 0xC0140017, 0xC0140017, 0xFD7C3D7F, 
		0xFD7C3D7F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC017FF, 0xFFC017FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFC017FF, 0xFFC017FF, 0xFC00157F, 0xFC00157F, 0xC0001557, 0xC0001557, 0xFC3C3D7F, 0xFC3C3D7F, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFC017FF, 0xFFC017FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF00FFF, 
		0xFFF00FFF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFFF55FFF, 0xFFF55FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFF0000FF, 0xFF0000FF, 0xF055550F, 0xF055550F, 0x055FF550, 0x055FF550, 0x05FFFF50, 
		0x05FFFF50, 0x05FFFF50, 0x05FFFF50, 0x055FF550, 0x055FF550, 0xF055550F, 0xF055550F, 0xFF0000FF, 0xFF0000FF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFF00FFF, 0xFFF00FFF, 0xFF0550FF, 0xFF0550FF, 0xF05FF50F, 0xF05FF50F, 0xF05FF50F, 
		0xF05FF50F, 0xFF0550FF, 0xFF0550FF, 0xFFF00FFF, 0xFFF00FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 
		0x005FF500, 0x005FF500, 0x05F55F50, 0x05F55F50, 0x0F5005F0, 0x0F5005F0, 0x0F5005F0, 0x0F5005F0, 0x05F55F50, 
		0x05F55F50, 0x005FF500, 0x005FF500, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF000F, 0xFFFF000F, 
		0xFFFFF00F, 0xFFFFF00F, 0xFF000F0F, 0xFF000F0F, 0xF0FF0FFF, 0xF0FF0FFF, 0xF0FF0FFF, 0xF0FF0FFF, 0xFF00FFFF, 
		0xFF00FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF000FF, 0xFFF000FF, 0xFF0FFF0F, 0xFF0FFF0F, 
		0xFF0FFF0F, 0xFF0FFF0F, 0xFFF000FF, 0xFFF000FF, 0xFFFF0FFF, 0xFFFF0FFF, 0xFFF000FF, 0xFFF000FF, 0xFFFF0FFF, 
		0xFFFF0FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0FFF, 0xFFFF0FFF, 0xFFFF00FF, 0xFFFF00FF, 0xFFFF0F0F, 0xFFFF0F0F, 
		0xFFFF0FFF, 0xFFFF0FFF, 0xFF000FFF, 0xFF000FFF, 0xFF000FFF, 0xFF000FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFF00000F, 0xFF00000F, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF00000F, 0xFF00000F, 0xFF0FFF0F, 0xFF0FFF0F, 
		0xF00FF00F, 0xF00FF00F, 0xF00FF00F, 0xF00FF00F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xF5F55F5F, 
		0xF5F55F5F, 0xFF5005FF, 0xFF5005FF, 0xF50FF05F, 0xF50FF05F, 0xF50FF05F, 0xF50FF05F, 0xFF5005FF, 0xFF5005FF, 
		0xF5F55F5F, 0xF5F55F5F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xC3FFFFFF, 0xC3FFFFFF, 0xC003FFFF, 0xC003FFFF, 
		0xC00003FF, 0xC00003FF, 0xC0000017, 0xC0000017, 0xC00017FF, 0xC00017FF, 0xC017FFFF, 0xC017FFFF, 0xD7FFFFFF, 
		0xD7FFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFC3, 0xFFFFFFC3, 0xFFFFC003, 0xFFFFC003, 0xFFC00003, 0xFFC00003, 
		0xD4000003, 0xD4000003, 0xFFD40003, 0xFFD40003, 0xFFFFD403, 0xFFFFD403, 0xFFFFFFD7, 0xFFFFFFD7, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC003FF, 0xFFC003FF, 0xFC3C3C3F, 0xFC3C3C3F, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFC3C3C3F, 0xFC3C3C3F, 0xFFC003FF, 0xFFC003FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3C3C3F, 
		0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC3C3C3F, 0xFC3C3C3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF00000F, 0xFF00000F, 
		0xF0FF0F0F, 0xF0FF0F0F, 0xF0FF0F0F, 0xF0FF0F0F, 0xFF000F0F, 0xFF000F0F, 0xFFFF0F0F, 0xFFFF0F0F, 0xFFFF0F0F, 
		0xFFFF0F0F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC003F, 0xFFFC003F, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC03FFF, 
		0xFFC03FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFFC03FF, 0xFFFC03FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFC003FFF, 0xFC003FFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF0000FF, 0xFF0000FF, 
		0xF0F0000F, 0xF0F0000F, 0xF0F0555F, 0xF0F0555F, 0xFF0555FF, 0xFF0555FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFC017FF, 0xFFC017FF, 0xFC00157F, 0xFC00157F, 0xFFC017FF, 0xFFC017FF, 0xFC00157F, 
		0xFC00157F, 0xC0001557, 0xC0001557, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFC003FF, 0xFFC003FF, 0xFC14143F, 0xFC14143F, 0xC17C3D43, 0xC17C3D43, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xC17C3D43, 0xC17C3D43, 0xFC14143F, 0xFC14143F, 0xFFC003FF, 0xFFC003FF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFD43FF, 0xFFFD43FF, 0xFFFFD43F, 0xFFFFD43F, 
		0xC0000003, 0xC0000003, 0xFFFFD43F, 0xFFFFD43F, 0xFFFD43FF, 0xFFFD43FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC17FFF, 0xFFC17FFF, 0xFC17FFFF, 0xFC17FFFF, 0xC0000003, 0xC0000003, 
		0xFC17FFFF, 0xFC17FFFF, 0xFFC17FFF, 0xFFC17FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC3C3FF, 
		0xFFC3C3FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xC0000003, 0xC0000003, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC3C3FF, 0xFFC3C3FF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFC017FF, 
		0xFFC017FF, 0xFFC017FF, 0xFFC017FF, 0xFC00017F, 0xFC00017F, 0xFC00017F, 0xFC00017F, 0xC0000017, 0xC0000017, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xD7FFFFD7, 0xD7FFFFD7, 0xFD7FFD7F, 0xFD7FFD7F, 0xFD7FFD7F, 0xFD7FFD7F, 0xFFD7D7FF, 
		0xFFD7D7FF, 0xFFD7D7FF, 0xFFD7D7FF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFC003FF, 0xFFC003FF, 0xFFC003FF, 0xFFC003FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFD57D57F, 
		0xFD57D57F, 0xFFD7FD7F, 0xFFD7FD7F, 0xFD7FD7FF, 0xFD7FD7FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF0FF0FF, 0xFF0FF0FF, 0xF000000F, 0xF000000F, 0xFF0FF0FF, 
		0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 0xF000000F, 0xF000000F, 0xFF0FF0FF, 0xFF0FF0FF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC0003F, 0xFFC0003F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFC003FF, 0xFFC003FF, 
		0xFFFFFC3F, 0xFFFFFC3F, 0xFC0003FF, 0xFC0003FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3FFFF, 0xFFC3FFFF, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFC3C3FFF, 
		0xFC3C3FFF, 0xFC3C3FFF, 0xFC3C3FFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3FC3FF, 0xFC3FC3FF, 
		0xFFC03C3F, 0xFFC03C3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFFF5FFF, 0xFFFF5FFF, 
		0xFFF5FFFF, 0xFFF5FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFF0FFF, 0xFFFF0FFF, 0xFFF0FFFF, 0xFFF0FFFF, 0xFF0FFFFF, 0xFF0FFFFF, 0xFF0FFFFF, 
		0xFF0FFFFF, 0xFF0FFFFF, 0xFF0FFFFF, 0xFFF0FFFF, 0xFFF0FFFF, 0xFFFF0FFF, 0xFFFF0FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFF0FFFF, 0xFFF0FFFF, 0xFFFF0FFF, 0xFFFF0FFF, 0xFFFFF0FF, 0xFFFFF0FF, 0xFFFFF0FF, 0xFFFFF0FF, 0xFFFFF0FF, 
		0xFFFFF0FF, 0xFFFF0FFF, 0xFFFF0FFF, 0xFFF0FFFF, 0xFFF0FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFC3C3C3F, 0xFC3C3C3F, 0xFFC003FF, 0xFFC003FF, 0xC003D557, 0xC003D557, 0xFFC157FF, 0xFFC157FF, 0xFC3C3C3F, 
		0xFC3C3C3F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFD7FFF, 0xFFFD7FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFD40017F, 0xFD40017F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFFF5FFF, 0xFFFF5FFF, 0xFFF5FFFF, 0xFFF5FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFD40017F, 0xFD40017F, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF55FFF, 
		0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFF00F, 0xFFFFF00F, 
		0xFFFF000F, 0xFFFF000F, 0xFFF000FF, 0xFFF000FF, 0xFF000FFF, 0xFF000FFF, 0xF000FFFF, 0xF000FFFF, 0xF00FFFFF, 
		0xF00FFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFC003FFF, 0xFC003FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFC3FFFF, 0xFFC3FFFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 
		0xFC00003F, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFC03FF, 0xFFFC03FF, 0xFFFFFC3F, 0xFFFFFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFC03F, 0xFFFFC03F, 0xFFFC3C3F, 
		0xFFFC3C3F, 0xFFC3FC3F, 0xFFC3FC3F, 0xFC00003F, 0xFC00003F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFC3F, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 0xFC00003F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC0003FF, 
		0xFC0003FF, 0xFFFFFC3F, 0xFFFFFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFC00003F, 0xFC00003F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 
		0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFFC0003F, 0xFFC0003F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF55FFF, 0xFFF55FFF, 
		0xFFFF5FFF, 0xFFFF5FFF, 0xFFF5FFFF, 0xFFF5FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFC17F, 0xFFFFC17F, 
		0xFFFC17FF, 0xFFFC17FF, 0xFFC17FFF, 0xFFC17FFF, 0xFC17FFFF, 0xFC17FFFF, 0xFFC17FFF, 0xFFC17FFF, 0xFFFC17FF, 
		0xFFFC17FF, 0xFFFFC17F, 0xFFFFC17F, 0xFFFFFFFF, 0xFFFFFFFF, 0xD7D7D7D7, 0xD7D7D7D7, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xD7D7D7D7, 0xD7D7D7D7, 0xFFFFFFFF, 0xFFFFFFFF, 0xD7D7D7D7, 0xD7D7D7D7, 0xFFFFFFFF, 0xFFFFFFFF, 0xD7D7D7D7, 
		0xD7D7D7D7, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC17FFFF, 0xFC17FFFF, 0xFFC17FFF, 0xFFC17FFF, 0xFFFC17FF, 0xFFFC17FF, 
		0xFFFFC17F, 0xFFFFC17F, 0xFFFC17FF, 0xFFFC17FF, 0xFFC17FFF, 0xFFC17FFF, 0xFC17FFFF, 0xFC17FFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C003F, 0xFC3C003F, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC0003FF, 0xFC0003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFFFF, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC003FFF, 0xFC003FFF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FC3FF, 0xFC3FC3FF, 0xFC003FFF, 0xFC003FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 
		0xFC00003F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC0003FF, 0xFC0003FF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 
		0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 0xFC00003F, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFC003FFF, 0xFC003FFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FC03F, 
		0xFC3FC03F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC0003F, 0xFFC0003F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFC00003F, 0xFC00003F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC003F, 0xFFFC003F, 
		0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 
		0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FC3FF, 0xFC3FC3FF, 
		0xFC003FFF, 0xFC003FFF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC03C03F, 0xFC03C03F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC03FC3F, 0xFC03FC3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3FC03F, 0xFC3FC03F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC0003FF, 0xFC0003FF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3C3C3F, 
		0xFC3C3C3F, 0xFC3FC3FF, 0xFC3FC3FF, 0xFFC03C3F, 0xFFC03C3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 
		0xFC3FFFFF, 0xFC3FFFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFFFC3F, 0xFFFFFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 
		0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 0xFC00003F, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFFC3C3FF, 0xFFC3C3FF, 
		0xFFC3C3FF, 0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xC3FFFFC3, 0xC3FFFFC3, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFFC3C3FF, 0xFFC3C3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xC3FFFFC3, 
		0xC3FFFFC3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC3C3FF, 
		0xFFC3C3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 0xFC00003F, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3FFFF, 
		0xFFC3FFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFC003FF, 0xFFC003FF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 
		0xFFC3FFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xF00FFFFF, 0xF00FFFFF, 
		0xF000FFFF, 0xF000FFFF, 0xFF000FFF, 0xFF000FFF, 0xFFF000FF, 0xFFF000FF, 0xFFFF000F, 0xFFFF000F, 0xFFFFF00F, 
		0xFFFFF00F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFFC3FF, 0xFFFFC3FF, 
		0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC143FF, 0xFFC143FF, 0xFC17D43F, 0xFC17D43F, 
		0xC17FFD43, 0xC17FFD43, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xF000000F, 0xF000000F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFD7FFFF, 
		0xFFD7FFFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFFD7FF, 0xFFFFD7FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC0003F, 
		0xFFC0003F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC0003FF, 0xFC0003FF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFC0003F, 0xFFC0003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFC3F, 0xFFFFFC3F, 
		0xFFFFFC3F, 0xFFFFFC3F, 0xFFC0003F, 0xFFC0003F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFFC0003F, 0xFFC0003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFC003FF, 
		0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC03FF, 0xFFFC03FF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 
		0xFFC003FF, 0xFFC003FF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFC0003FF, 0xFC0003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003C3, 0xFFC003C3, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFFC0003F, 0xFFC0003F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFC003FF, 0xFFC003FF, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC03FFF, 0xFFC03FFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFC03FFF, 0xFFC03FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC03FF, 0xFFFC03FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC03FF, 
		0xFFFC03FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 
		0xFC003FFF, 0xFC003FFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FC3FF, 
		0xFC3FC3FF, 0xFC003FFF, 0xFC003FFF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFC03FFF, 0xFFC03FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xC000003F, 0xC000003F, 0xC3FC3FC3, 0xC3FC3FC3, 0xC3FC3FC3, 0xC3FC3FC3, 0xC3FC3FC3, 
		0xC3FC3FC3, 0xC3FC3FC3, 0xC3FC3FC3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xF0F000FF, 0xF0F000FF, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 
		0xFF0FFF0F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC0003FF, 0xFC0003FF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC0003F, 0xFFC0003F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFFC0003F, 0xFFC0003F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xC3C003FF, 0xC3C003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFC3FFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 
		0xFFC003FF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFFFC3F, 0xFFFFFC3F, 0xFC0003FF, 0xFC0003FF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFC03F, 0xFFFFC03F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 
		0xFFC3C3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xC3FFFFC3, 0xC3FFFFC3, 0xC3FFFFC3, 0xC3FFFFC3, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFFC3C3FF, 
		0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFFC3C3FF, 0xFFC3C3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFFC0003F, 0xFFC0003F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 0xFC00003F, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFC3FFFF, 0xFFC3FFFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC03FF, 0xFFFC03FF, 0xFFC3FFFF, 
		0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC3FFFF, 
		0xFFFC03FF, 0xFFFC03FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFC3FF, 
		0xFFFFC3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFC03FFFF, 0xFC03FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xC3FC3FC3, 0xC3FC3FC3, 0xFFFFC03F, 0xFFFFC03F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xC3FFFFC3, 0xC3FFFFC3, 0xC3FFFFC3, 
		0xC3FFFFC3, 0xC0000003, 0xC0000003, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3C3C3F, 0xFC3C3C3F, 0xFFC003FF, 
		0xFFC003FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFC03F, 0xFFFFC03F, 0xFFC03FFF, 0xFFC03FFF, 0xFFD557FF, 0xFFD557FF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC00003F, 0xFC00003F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFD5557F, 0xFFD5557F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFC0003F, 0xFFC0003F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFFC003C3, 0xFFC003C3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xFFFC03FF, 0xFFFC03FF, 0xFFD5557F, 
		0xFFD5557F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC03FF, 0xFFFC03FF, 0xFFC3FC3F, 0xFFC3FC3F, 0xFFD4017F, 0xFFD4017F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFC3C3FFF, 0xFC3C3FFF, 0xFFC0003F, 0xFFC0003F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFC3C3FF, 0xFFC3C3FF, 0xFFD557FF, 0xFFD557FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFC003FF, 
		0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xFFFC03FF, 0xFFFC03FF, 0xFFD557FF, 0xFFD557FF, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC03FFF, 0xFFC03FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xFFFC03FF, 
		0xFFFC03FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFD557FF, 0xFFD557FF, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC00003F, 0xFC00003F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFC03FFF, 0xFFC03FFF, 0xFFFFC03F, 0xFFFFC03F, 0xFC00003F, 0xFC00003F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC0003FF, 
		0xFC0003FF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC03C03F, 0xFC03C03F, 0xFFFC3FC3, 0xFFFC3FC3, 0xFC000003, 0xFC000003, 0xC3FC3FFF, 
		0xC3FC3FFF, 0xFC03C03F, 0xFC03C03F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF00000F, 0xFF00000F, 
		0xF0FF0FFF, 0xF0FF0FFF, 0xF0FF0FFF, 0xF0FF0FFF, 0xF000000F, 0xF000000F, 0xF0FF0FFF, 0xF0FF0FFF, 0xF0FF000F, 
		0xF0FF000F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC003FF, 0xFFC003FF, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3D7C3F, 0xFC3D7C3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3C3FF, 
		0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFFC003C3, 0xFFC003C3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xFFFC03FF, 0xFFFC03FF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC0003F, 0xFFC0003F, 0xFFFFFC3F, 0xFFFFFC3F, 0xFFC003FF, 0xFFC003FF, 
		0xFFC3C3FF, 0xFFC3C3FF, 0xFFD557FF, 0xFFD557FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC3C3FF, 0xFFC3C3FF, 
		0xFD7FFD7F, 0xFD7FFD7F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFC003FF, 0xFFC003FF, 0xFC3C3FFF, 0xFC3C3FFF, 0xFC3C3FFF, 0xFC3C3FFF, 0xFFC003FF, 0xFFC003FF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3C3FF, 0xFFC3C3FF, 
		0xFFC3FFFF, 0xFFC3FFFF, 0xFC003FFF, 0xFC003FFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC3C3FF, 0xFFC3C3FF, 0xFC00003F, 0xFC00003F, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC0003FF, 0xFC0003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC0003FF, 0xFC0003FF, 0xFC3FC3FF, 0xFC3FC3FF, 
		0xFC3C003F, 0xFC3C003F, 0xFC3FC3FF, 0xFC3FC3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFC03F, 
		0xFFFFC03F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC003FF, 0xFFC003FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFC03FFFF, 0xFC03FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFC03F, 0xFFFFC03F, 0xFFC03FFF, 0xFFC03FFF, 0xFFD5557F, 
		0xFFD5557F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC03FF, 0xFFFC03FF, 0xFC03FFFF, 0xFC03FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFC3F, 0xFFFFFC3F, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFC003FF, 0xFFC003FF, 0xFC00003F, 0xFC00003F, 0xFC03C03F, 
		0xFC03C03F, 0xFC00003F, 0xFC00003F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFC03F, 0xFFFFC03F, 
		0xFFC03FFF, 0xFFC03FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFFC003C3, 0xFFC003C3, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC03C3F, 0xFFC03C3F, 0xFC3FC3FF, 0xFC3FC3FF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xC3C003FF, 0xC3C003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC03C3F, 0xFFC03C3F, 0xFC3FC3FF, 0xFC3FC3FF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFC03FC3F, 0xFC03FC3F, 0xFC3C3C3F, 0xFC3C3C3F, 0xFC3FC03F, 0xFC3FC03F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC03FFF, 0xFFC03FFF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFC3FC3FF, 
		0xFFC03C3F, 0xFFC03C3F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFF00FFF, 0xFFF00FFF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFFF00FFF, 0xFFF00FFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFF0000FF, 0xFF0000FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF0000FF, 
		0xFF0000FF, 0xFF0FFFFF, 0xFF0FFFFF, 0xFF0FFFFF, 0xFF0FFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF0000FF, 0xFF0000FF, 0xFFFFF0FF, 
		0xFFFFF0FF, 0xFFFFF0FF, 0xFFFFF0FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFF0FFFFF, 0xFF0FFFFF, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FF0FF, 0xFF0FF0FF, 0xFFFF0FFF, 0xFFFF0FFF, 0xFFF0F00F, 
		0xFFF0F00F, 0xFF0FFF0F, 0xFF0FFF0F, 0xF0FFF0FF, 0xF0FFF0FF, 0xFFFFF00F, 0xFFFFF00F, 0xFF0FFFFF, 0xFF0FFFFF, 
		0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FF0FF, 0xFF0FF0FF, 0xFFFF0FFF, 0xFFFF0FFF, 0xFFF0F0FF, 0xFFF0F0FF, 0xFF0F00FF, 
		0xFF0F00FF, 0xF0F000FF, 0xF0F000FF, 0xFFFFF0FF, 0xFFFFF0FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC003FF, 0xFFC003FF, 0xFFC003FF, 0xFFC003FF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF0FF0F, 0xFFF0FF0F, 
		0xFF0FF0FF, 0xFF0FF0FF, 0xF0FF0FFF, 0xF0FF0FFF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFFF0FF0F, 0xFFF0FF0F, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xF0FF0FFF, 0xF0FF0FFF, 0xFF0FF0FF, 0xFF0FF0FF, 
		0xFFF0FF0F, 0xFFF0FF0F, 0xFF0FF0FF, 0xFF0FF0FF, 0xF0FF0FFF, 0xF0FF0FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xF0F0F0F0, 
		0xF0F0F0F0, 0xFFFFFFFF, 0xFFFFFFFF, 0x0F0F0F0F, 0x0F0F0F0F, 0xFFFFFFFF, 0xFFFFFFFF, 0xF0F0F0F0, 0xF0F0F0F0, 
		0xFFFFFFFF, 0xFFFFFFFF, 0x0F0F0F0F, 0x0F0F0F0F, 0xFFFFFFFF, 0xFFFFFFFF, 0xF0F0F0F0, 0xF0F0F0F0, 0x0F0F0F0F, 
		0x0F0F0F0F, 0xF0F0F0F0, 0xF0F0F0F0, 0x0F0F0F0F, 0x0F0F0F0F, 0xF0F0F0F0, 0xF0F0F0F0, 0x0F0F0F0F, 0x0F0F0F0F, 
		0xF0F0F0F0, 0xF0F0F0F0, 0x0F0F0F0F, 0x0F0F0F0F, 0xF000F000, 0xF000F000, 0x00F000F0, 0x00F000F0, 0xF000F000, 
		0xF000F000, 0x00F000F0, 0x00F000F0, 0xF000F000, 0xF000F000, 0x00F000F0, 0x00F000F0, 0xF000F000, 0xF000F000, 
		0x00F000F0, 0x00F000F0, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0x00005FFF, 0x00005FFF, 0x55505FFF, 
		0x55505FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0x00005FFF, 0x00005FFF, 0x00005FFF, 0x00005FFF, 0x00005FFF, 0x00005FFF, 0x55505FFF, 
		0x55505FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0x000005FF, 0x000005FF, 0x550005FF, 0x550005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000055, 0x00000055, 
		0x000FF555, 0x000FF555, 0x000FF555, 0x000FF555, 0x00055555, 0x00055555, 0x00555555, 0x00555555, 0x05555555, 
		0x05555555, 0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000055, 0x00000055, 0x000FF555, 0x000FF555, 
		0x000FF555, 0x000FF555, 0x00055555, 0x00055555, 0x00555555, 0x00555555, 0x05555555, 0x05555555, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0x000005FF, 0x000005FF, 0x000005FF, 0x000005FF, 0x000005FF, 0x000005FF, 
		0x550005FF, 0x550005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x000005FF, 
		0x000005FF, 0x000005FF, 0x000005FF, 0x000005FF, 0x000005FF, 0x550005FF, 0x550005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0x000005FF, 0x000005FF, 0x000005FF, 
		0x000005FF, 0x000005FF, 0x000005FF, 0x555555FF, 0x555555FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000055, 0x00000055, 0x000FF555, 0x000FF555, 0x000FF555, 
		0x000FF555, 0x00055555, 0x00055555, 0x00555555, 0x00555555, 0x05555555, 0x05555555, 0x00000000, 0x00000000, 
		0x00000005, 0x00000005, 0x00000055, 0x00000055, 0x000FF555, 0x000FF555, 0x000FF555, 0x000FF555, 0x00055555, 
		0x00055555, 0x00555555, 0x00555555, 0x05555555, 0x05555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0x00005FFF, 0x00005FFF, 0x55505FFF, 0x55505FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF00000, 0xFFF00000, 0xFFF55555, 0xFFF55555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0x00000000, 0x00000000, 
		0x55555555, 0x55555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x55505555, 0x55505555, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF00000, 0xFFF00000, 0xFFF05555, 0xFFF05555, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0x00000000, 0x00000000, 0x55555555, 0x55555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0x00000000, 
		0x00000000, 0x55505555, 0x55505555, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF00000, 0xFFF00000, 0xFFF00000, 0xFFF00000, 0xFFF00000, 
		0xFFF00000, 0xFFF05555, 0xFFF05555, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF000550, 0xFF000550, 0xFF000555, 0xFF000555, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF555555, 0xFF555555, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000000, 0xFF000000, 
		0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000555, 0xFF000555, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x55555555, 0x55555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x55000555, 0x55000555, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000555, 0xFF000555, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x55555555, 0x55555555, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x55000555, 0x55000555, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x55555555, 0x55555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0x00000000, 0x00000000, 0x55555555, 0x55555555, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x55555555, 0x55555555, 0xFFF55FFF, 
		0xFFF55FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0x00000000, 0x00000000, 0x55000555, 0x55000555, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFF0005FF, 0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000055, 0x00000055, 0x000FF555, 0x000FF555, 
		0x000FF555, 0x000FF555, 0x00055555, 0x00055555, 0x00555555, 0x00555555, 0x05555555, 0x05555555, 0x00000000, 
		0x00000000, 0x00000005, 0x00000005, 0x00000055, 0x00000055, 0x000FF555, 0x000FF555, 0x000FF555, 0x000FF555, 
		0x00055555, 0x00055555, 0x00555555, 0x00555555, 0x05555555, 0x05555555, 0x00000000, 0x00000000, 0x00000005, 
		0x00000005, 0x00000055, 0x00000055, 0x000FF555, 0x000FF555, 0x000FF555, 0x000FF555, 0x00055555, 0x00055555, 
		0x00555555, 0x00555555, 0x05555555, 0x05555555, 0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000055, 
		0x00000055, 0x000FF555, 0x000FF555, 0x000FF555, 0x000FF555, 0x00055555, 0x00055555, 0x00555555, 0x00555555, 
		0x05555555, 0x05555555, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0x00000550, 
		0x00000550, 0x55000555, 0x55000555, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 0xFF0005FF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x55555555, 0x55555555, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0x00005FFF, 0x00005FFF, 0x55555FFF, 0x55555FFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFF00000, 0xFFF00000, 0xFFF05555, 0xFFF05555, 0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 
		0xFFF05FFF, 0xFFF05FFF, 0xFFF05FFF, 0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 
		0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x05555555, 
		0x05555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x05555555, 0x05555555, 0x0000FFFF, 
		0x0000FFFF, 0x0005FFFF, 0x0005FFFF, 0x0005FFFF, 0x0005FFFF, 0x0005FFFF, 0x0005FFFF, 0x0005FFFF, 0x0005FFFF, 
		0x0005FFFF, 0x0005FFFF, 0x0005FFFF, 0x0005FFFF, 0x0555FFFF, 0x0555FFFF, 0xFFFF0000, 0xFFFF0000, 0xFFFF0005, 
		0xFFFF0005, 0xFFFF0005, 0xFFFF0005, 0xFFFF0005, 0xFFFF0005, 0xFFFF0005, 0xFFFF0005, 0xFFFF0005, 0xFFFF0005, 
		0xFFFF0005, 0xFFFF0005, 0xFFFF0555, 0xFFFF0555, 0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000005, 
		0x00000005, 0x05555555, 0x05555555, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC03C3F, 0xFFC03C3F, 0xFC3FC3FF, 
		0xFC3FC3FF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFFC03C3F, 0xFFC03C3F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFC03FFF, 0xFFC03FFF, 0xFC3FC3FF, 0xFC3FC3FF, 0xFC3C3FFF, 0xFC3C3FFF, 0xFC3C03FF, 
		0xFC3C03FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FC3FF, 0xFC3FC3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFC00003F, 0xFC00003F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 
		0xFC3FFFFF, 0xFC3FFFFF, 0xFC3FFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 0xFC00003F, 
		0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC3C3FF, 
		0xFFC3C3FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC00003F, 0xFC00003F, 0xFFC03FFF, 0xFFC03FFF, 
		0xFFFC03FF, 0xFFFC03FF, 0xFFFC03FF, 0xFFFC03FF, 0xFFC03FFF, 0xFFC03FFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC00003, 0xFFC00003, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 0xFF0FFF0F, 
		0xFF0FFF0F, 0xFF0FFF0F, 0xF0F000FF, 0xF0F000FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFC03C3F, 0xFFC03C3F, 0xFC3C03FF, 0xFC3C03FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFFC03F, 0xFFFFC03F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFC003FF, 0xFFC003FF, 0xFFC3C3FF, 0xFFC3C3FF, 0xFFC003FF, 0xFFC003FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC003FF, 
		0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF0000FF, 0xFF0000FF, 0xF0FFFF0F, 0xF0FFFF0F, 0xF000000F, 
		0xF000000F, 0xF055550F, 0xF055550F, 0xF055550F, 0xF055550F, 0xFF0000FF, 0xFF0000FF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFFC3C3FF, 0xFFC3C3FF, 0xFC03C03F, 0xFC03C03F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFC3F, 0xFFFFFC3F, 
		0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFC3FC3F, 0xFFC3FC3F, 0xFC3FFC3F, 0xFC3FFC3F, 0xFC3FFC3F, 
		0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC03C03F, 0xFC03C03F, 0xC3FC3FC3, 0xC3FC3FC3, 0xC3FC3FC3, 0xC3FC3FC3, 0xFC03C03F, 
		0xFC03C03F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC3FC03F, 0xFC3FC03F, 
		0xC3FC3FC3, 0xC3FC3FC3, 0xC3FC3FC3, 0xC3FC3FC3, 0xFC00003F, 0xFC00003F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC003FF, 0xFFC003FF, 0xFC3FFFFF, 0xFC3FFFFF, 
		0xFFC3FFFF, 0xFFC3FFFF, 0xFC3FFC3F, 0xFC3FFC3F, 0xFFC003FF, 0xFFC003FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFF00FFF, 0xFFF00FFF, 0xFF0FF0FF, 0xFF0FF0FF, 0xF0FFFF0F, 0xF0FFFF0F, 0xF0FFFF0F, 0xF0FFFF0F, 
		0xF0FFFF0F, 0xF0FFFF0F, 0xF0FFFF0F, 0xF0FFFF0F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xF000000F, 
		0xF000000F, 0xFFFFFFFF, 0xFFFFFFFF, 0xF000000F, 0xF000000F, 0xF000000F, 0xF000000F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xF000000F, 0xF000000F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFC00003F, 0xFC00003F, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFFC3FF, 
		0xFFFFC3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFC3FFFF, 0xFFC3FFFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFFC3FF, 0xFFFFC3FF, 0xFC00003F, 0xFC00003F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFC03F, 0xFFFFC03F, 0xFFFC3FC3, 0xFFFC3FC3, 0xFFFC3FC3, 0xFFFC3FC3, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 
		0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xFFFC3FFF, 0xC3FC3FFF, 0xC3FC3FFF, 0xC3FC3FFF, 0xC3FC3FFF, 0xFC03FFFF, 
		0xFC03FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF00FFF, 0xFFF00FFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFF0000FF, 0xFF0000FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF00FFF, 0xFFF00FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xC3FC3FC3, 0xC3FC3FC3, 0xFFFFC03F, 0xFFFFC03F, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xC3FC3FC3, 0xC3FC3FC3, 0xFFFFC03F, 0xFFFFC03F, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF00FFF, 0xFFF00FFF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 
		0xFFF00FFF, 0xFFF00FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFF5FF5FF, 0xFF5FF5FF, 0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFFF55FFF, 0xFF5FF5FF, 0xFF5FF5FF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFD7FFF, 0xFFFD7FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF0000F, 0xFFF0000F, 0xFFF0FFFF, 
		0xFFF0FFFF, 0xF0F0FFFF, 0xF0F0FFFF, 0xFF00FFFF, 0xFF00FFFF, 0xFFF0FFFF, 0xFFF0FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFF000FFF, 0xFF000FFF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 0xFF0FF0FF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFF000FFF, 
		0xFF000FFF, 0xFFFF00FF, 0xFFFF00FF, 0xFFF00FFF, 0xFFF00FFF, 0xFF0000FF, 0xFF0000FF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xF000000F, 0xF000000F, 
		0xF000005F, 0xF000005F, 0xF000005F, 0xF000005F, 0xF000005F, 0xF000005F, 0xF000005F, 0xF000005F, 0xF055555F, 
		0xF055555F, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0x00000005, 0x00000005, 0x00000055, 0x00000055, 
		0x000FF555, 0x000FF555, 0x000FF555, 0x000FF555, 0x00055555, 0x00055555, 0x00555555, 0x00555555, 0x05555555, 
		0x05555555
	font16_16Palette: .word 0xFFFF0000
	font16_16address: .word 0x00000000

	menu1:
		.word
		0x00000000, 0x00000000, 0x003FFFFF, 0x003FFFFF, 0x01FFFFFF, 0x0FFFFFFF, 0x0FFFC000, 0x0FFFCFFF, 0x0FF50FFF, 
		0x0FF00FFF, 0x0FF00FFF, 0x0FF00FFF, 0x0FF00FFF, 0x0FF00FFF, 0x0FF00FFF, 0x0FF00FFF, 0x00000000, 0x00000000, 
		0xFFFC00FF, 0xFFFF00FF, 0xFFFF57FF, 0xFFFFFFFF, 0x01FFFFFF, 0xF5FFFFFF, 0xFC5FFFD4, 0xFFFFFFC0, 0xFFFFFFC0, 
		0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0x00000000, 0x00000000, 0xFFFFFFF0, 0xFFFFFFFC, 
		0xFFFFFFFD, 0xFFFFFFFF, 0x00000FFF, 0x7FFFDFFF, 0x7FFFF17F, 0x7FFFF03F, 0x7FFFF03F, 0x7FFFF03F, 0x7FFFF03F, 
		0x7FFFF03F, 0x7FFFF03F, 0x7FFFF03F, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFF000000, 0xFFFFC07F, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFC0FF, 0xFE3FC0FF, 0xFE3FC0FF, 0xFE3FC0FF, 0xFE3FC0FF, 
		0xFE3FC0FF, 0x00000000, 0x00000000, 0xFFC00000, 0xFFF00000, 0xFFF50000, 0xFFFF0000, 0x3FFF0000, 0xFFFF0000, 
		0xFFFF0000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFCFFC00F, 0xFCFFFFFF, 0x00000000, 
		0x00000000, 0x00FFFFFF, 0x00FFFFFF, 0x07FFFFFF, 0x3FFFFFFF, 0x3FFF0000, 0x3FFF3FFF, 0x3FD43FFF, 0xFFC03FFF, 
		0xFFC03FFF, 0xFFC03FFF, 0xFFC03FFF, 0xFFC03FFF, 0xFFC03FFF, 0xFFC03FFF, 0x00000000, 0x00000000, 0xFFF0BFFF, 
		0xFFFCFFFF, 0xFFFDFFFF, 0xFFFFFFFF, 0x07FFFF00, 0xD7FFFF01, 0xF17FFF01, 0xFFFFFF01, 0xFFFFFF01, 0xFFFFFF01, 
		0xFFFFFF01, 0xFFFFFF00, 0xFFFFFF00, 0xFFFFFF01, 0x00000000, 0x00000000, 0xFD3FFFFF, 0xFFBFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFF00FF, 
		0x000000FF, 0xFFFF80FF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFC000000, 
		0xFC07FFFF, 0xFC07FFFF, 0xFC07FFFF, 0xFC07FFFF, 0xFC07FFFF, 0xFC07FFFF, 0xFC03FFFF, 0xFC000000, 0xFC07FFFF, 
		0x00000000, 0x00000000, 0xFFFC3FFF, 0xFFFC7FFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x03FFFF40, 0xFFFFFF5F, 0xFFFFF52F, 
		0xFFFFF02F, 0xFFFFF02F, 0xFFFFF02F, 0xFFFFF02F, 0xFFFFF02F, 0xFFFFF02F, 0xFFFFF02F, 0x00000000, 0x00000000, 
		0xFFFFFC3F, 0xFFFFFE3F, 0xFFFFFF7F, 0xFFFFFFFF, 0x0003FFFF, 0xFFF7FFFF, 0xFFFC5FFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFF0FFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xC0FFFFF0, 0xC0FFFFF3, 0xC0FFFD4F, 0xC0FFFC3F, 0xC0FFF8FF, 0xC0FFC0FF, 0xC0FF8FFF, 
		0xC03E3FFF, 0xC0003FFF, 0xC07F7FFF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0x3FFF0000, 0xFFFF40FF, 0xFFFF40FF, 0xFFFF40FF, 0xFFFF40FF, 0xFFFF40FF, 0xFFFF40FF, 0xFFFF407F, 0xFFFF4000, 
		0xFFFF40FF, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000FFFC, 0xFFFFFFFC, 
		0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 0x001FFFFC, 0xFFFFFFFC, 0x00000000, 
		0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x0000007F, 0x03FFFE7F, 0x03FFFF17, 0x03FFFF03, 
		0x03FFFF03, 0x03FFFF03, 0x03FFFF3F, 0x02FFFC7F, 0x0000007F, 0x03FFFF3F, 0x00000000, 0x00000000, 0x003FFFFF, 
		0xC03FFFFF, 0xD5FFFFFF, 0xFFFFFFFF, 0xFFFFC000, 0xFFFFCFFF, 0xFFF50FFF, 0xFFF00FFF, 0xFFF00FFF, 0xFFF00FFF, 
		0xFFFF0FFF, 0xFFFFCFFF, 0xFFFFC000, 0xFFFFFFFF, 0x00000000, 0x00000000, 0xFFFC0000, 0xFFFF0000, 0xFFFF5000, 
		0xFFFFF000, 0x01FFF000, 0xF5FFFF40, 0xFC5FFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 
		0x02FFFFC0, 0xFCFFFFC0, 0x0FF00FFF, 0x0FF00FFF, 0x0FF00FFF, 0x0FF00FFF, 0x0FFFCFFF, 0x0FFFC000, 0x0FFFFFFF, 
		0x07FFFFFF, 0x003FFFFF, 0x003FFFFF, 0x0007FFFF, 0x0003FFFF, 0x0000FFFF, 0x00000000, 0x00000000, 0x00000000, 
		0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFC0FFFC0, 0xF4FFFFC0, 0x01FFFFC0, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFF5FF, 0xFFFFF0FF, 0xFFFFF0FF, 0x00000000, 0x00000000, 0x00000000, 0x0000003F, 0x3FFFC03F, 
		0x7FFFF03F, 0x7FFFF03F, 0x7FFFF03F, 0x7FFFF03F, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFDFFFF, 
		0xFFFCFFFF, 0xFFFCBFFF, 0x00000000, 0x00000000, 0x00000000, 0xFE3FC0FF, 0xFE3FC0FF, 0xFE3FC0FF, 0xFE3FC0FF, 
		0xFE3FC0FF, 0xFE3FC0FF, 0xFE3FFFFF, 0xFE3FFFFF, 0xFE3FFFFF, 0xFE3FFFFF, 0xFE06FFFF, 0xFE01FFFF, 0xFC00FFFF, 
		0x00000000, 0x00000000, 0x00000000, 0xFCFFFFFF, 0xFCFFFFFF, 0xFC3FFFFF, 0xFC03FFFF, 0xFC03FFFF, 0xFC000000, 
		0xFC000000, 0xFC000000, 0xFC000000, 0xFC000000, 0xFC000000, 0xFC000000, 0xFC000000, 0x00000000, 0x00000000, 
		0x00000000, 0xFFC03FFF, 0xFFC03FFF, 0xFFC03FFF, 0xFFC03FFF, 0xFFFF3FFF, 0x3FFF0000, 0x3FFFFFFF, 0x1FFFFFFF, 
		0x00FFFFFF, 0x00FFFFFF, 0x001FFFFF, 0x000FFFFF, 0x0003FFFF, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFF01, 
		0xFFFFFF01, 0xFFFFFF01, 0xF03FFF01, 0xD3FFFF01, 0x0BFFFF01, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFD7FF, 0xFFFFC3FF, 0xFFFFC3FF, 0x00000000, 0x00000000, 0x00000000, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFC0FF, 
		0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFC0FF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFF7FFFF, 0xFFF3FFFF, 
		0xFFF2FFFF, 0x00000000, 0x00000000, 0x00000000, 0xFC07FFFF, 0xFC07FFFF, 0xFC07FFFF, 0xFC07FFFF, 0xFC07FFFF, 
		0xFC000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 
		0x00000000, 0x00000000, 0xFFFFF02F, 0xFFFFF02F, 0xFFFFF02F, 0xFFFFF02F, 0xFFFFFF5F, 0x03FFFF40, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFE7FF, 0xFFFFD3FF, 0xFFFFC2FF, 0x00000000, 0x00000000, 0x00000000, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFC0FFF, 0xFFF4FFFF, 0x0003FFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFF6, 0xFFFFFFF1, 0xFFFFFFE0, 0x00000000, 0x00000000, 0x00000000, 0xC0FFC0FF, 0xC0FFF8FF, 
		0xC0FFFCFF, 0xC0FFFC0F, 0xC0FFFFE7, 0xC0FFFFF0, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFDFF, 
		0xFFFFFCFF, 0xFFFFFCFF, 0x00000000, 0x00000000, 0x00000000, 0xF4FF40FF, 0xFFFF40FF, 0xFFFF40FF, 0xFFFF40FF, 
		0xFFFF40FF, 0x3FFF4000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 0xFFFFFFFC, 0x0000FFFC, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0x00000000, 
		0x00000000, 0x03FFFF03, 0x03FFFF03, 0x03FFFF03, 0x03FFFF03, 0x03FFFF03, 0x03FFFF03, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFDFFF, 0xFFFFCFFF, 0xFFFFCBFF, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 
		0xFFFFFFFF, 0xFFFFFFFF, 0xFFF00FFF, 0xFFFFCFFF, 0xFFFFC000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 
		0xFFF7FFFF, 0xFFF3FFFF, 0xFFC0FFFF, 0x00000000, 0x00000000, 0x00000000, 0xFC0FFFC0, 0xFC0FFFC0, 0xFC0FFFC0, 
		0xFC0FFFC0, 0xF4FFFFC0, 0x02FFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFFFC0, 0xFFFFF500, 0xFFFFF000, 
		0xFFFFF000, 0x00000000, 0x00000000, 0x00000000
	menupalette: 0xFFFFFFFF
	menu1address: 0x00000000

	menu2:
		.word
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000005, 0x0000006A, 0x000055AA, 0x00006FFF, 
		0x000001FF, 0x000051FB, 0x00007FFA, 0x000017FE, 0x000001FF, 0x000001EA, 0x000002EF, 0x000003FF, 0x000003EA, 
		0x000003EA, 0x000007EA, 0x00000000, 0x00000000, 0x40000000, 0xA4000000, 0xAA500000, 0xFFA90050, 0xFFFA56A9, 
		0xEBFFFFFF, 0xEABFFFFF, 0xFBFEA9A9, 0xFFEAA965, 0xAFAAA955, 0xAAAA5555, 0xAAA95559, 0xAAAAAAAA, 0xAAAAAAAA, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x96950000, 0xFFFFE940, 
		0xAAABFFD0, 0x6AAAAAFD, 0x555AAAAB, 0x5555AAAA, 0x55556AAA, 0xA9556AAA, 0xAA6AAAAA, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00655556, 0x01BFFFFF, 
		0x87FFFFFF, 0xFFEAAABF, 0xBAAAAABF, 0xAAAAAAAF, 0xAAABFFAF, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x40000000, 0xD0000000, 0xD0000000, 0xD0000000, 
		0xD0000000, 0xC0000000, 0xC0000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001550, 0x00007FE5, 0x00003FFE, 0x00003EAF, 
		0x00007EAA, 0x00007E6A, 0x00007E5A, 0x00001E5A, 0x00001E56, 0x00001E5A, 0x00000F56, 0x000007EA, 0x000007EA, 
		0x00001FAA, 0x00003EAA, 0x00007EAA, 0x00007EAA, 0x0001FAAA, 0x4001FAAA, 0xE501FAAA, 0xFF82FAAA, 0xABE7EAAA, 
		0xAAFFEAA9, 0xAAAFAAA8, 0xAAAFAAA0, 0xAAAFAA90, 0xAAAFAAA0, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0x955AAAAA, 0x5A96AAAA, 0x6AA9AAAA, 0xAAAA6AAA, 0xAAAAAAAA, 0xAA6AAAAA, 0x401AAAAA, 0x0106AAAA, 0x0F41AAAA, 
		0x1F40AAAA, 0x3F40AAAA, 0x3FC0AAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAA956A, 0xAAAA556A, 0xAAAAAA9A, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAA9556AA, 0xAA8040AA, 
		0xAA47D02A, 0xAAFBFEBF, 0xAAFAFABF, 0xAABEFABF, 0xAAFFFFFF, 0xAABFFAFF, 0xAABFEAFD, 0xAAAEEAFD, 0xAAAFAABD, 
		0xAAABAA78, 0xAAAAAAE0, 0xAAAAAAF0, 0xAAAAAAF4, 0xAAAAAAFD, 0xAAAAAAFD, 0xAAAAAABF, 0xAAAAAABE, 0xC0000000, 
		0xC0000000, 0x80000000, 0xC0000000, 0x40000000, 0x00000000, 0x08000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000006, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA5000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x0000006F, 
		0x000001FF, 0x00005FFF, 0x0007FBFF, 0x001F9FFF, 0x01FEBFEA, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x000175A4, 0x0017E5BD, 0x017F555B, 0x1BF95555, 0xBF955555, 0xFD555555, 0xF5555555, 0xA9555555, 
		0xAA541555, 0xEA941555, 0xFA900555, 0x00001F95, 0x00002F95, 0x00001FA5, 0x00000FA5, 0x000007E9, 0x000003EA, 
		0x440001FA, 0xFF44007E, 0x6BFF502E, 0x556FF41E, 0x55557F45, 0x55555BE0, 0x555556FE, 0x5555557F, 0x55555556, 
		0x55555555, 0xAAAFAAA5, 0x6AAEAAAA, 0x5AAFAA9B, 0x5AAEAA9B, 0x5AAFEAAA, 0x96BEFFFA, 0x96FAAAFF, 0xABEAAAAB, 
		0xAAEAAAAA, 0xAAEAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xE9AAAAAA, 0xFD5AAAAA, 0x7F95AAAA, 0x7E40AAAA, 
		0xA901AAAA, 0xAA5AAAAA, 0xEAAAAAAA, 0xBEAAAAAA, 0xAFFAAAAA, 0xFBFAAAAA, 0xFFFFFAAA, 0xAFFFFEBF, 0xEABFFFBF, 
		0xFFAFFEBF, 0xFAAAAABF, 0xFAAAAAAA, 0xFAABEABA, 0xBFFFFABE, 0xAAAABAAF, 0xAA07D01A, 0xA807E00A, 0xA803F40A, 
		0xA402FC0A, 0xA401B40A, 0xA956A52A, 0xAAAAAAAA, 0xAAAAAAAA, 0xFFFFAAAA, 0xEAAA6AAA, 0xFEAAAAAA, 0xFFEAAAAA, 
		0xFFFAAAAA, 0xBFFEAAAF, 0xAABFFEBF, 0xFEAAAEFE, 0xAAAAAAAE, 0xAAAA95AF, 0xAAAAA56B, 0xAAAAA55B, 0xAAAAA95B, 
		0xAAAAA956, 0xAAAAA956, 0xAAAAAA55, 0xAAAAA955, 0xAAAAA965, 0xAAAAAA55, 0xAAAAAA55, 0xFAAAAA55, 0xFAAAAA55, 
		0xEAAAAA55, 0xAAAAAA55, 0x00000000, 0x40000000, 0x40000000, 0xC0000000, 0xC0000000, 0xD0000000, 0xF4000000, 
		0xF8000000, 0xBC000000, 0x74000000, 0x74000000, 0xB4000000, 0xB8000000, 0x7C000000, 0x7D000000, 0xAD000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000001B, 0x0000006F, 
		0x000000BE, 0x000001BE, 0x000001BA, 0x000001FA, 0x000001FA, 0x000002FA, 0x000002FA, 0x000002FA, 0x000003EA, 
		0x000001EA, 0x000001EA, 0x000001EA, 0x000001EA, 0x000001EA, 0xFE400000, 0xAFD00000, 0xAAF54000, 0xAAAFA400, 
		0xAAABF940, 0xAAAABF90, 0xAAAAABF4, 0xA96AAAFD, 0xA956AAAF, 0xA955AAAF, 0xA9556AAA, 0xAA556AAA, 0xA695AAAA, 
		0xA5556AAA, 0x95556AAA, 0x9555AAAF, 0x00000001, 0x00000007, 0x0000007E, 0x000006EA, 0x00005FBF, 0x0001FFFE, 
		0x0017FFAA, 0x006FF9AE, 0x46FFEBE5, 0xEFFBFE55, 0xFFAF9556, 0xBFBD555B, 0xAFF956FF, 0xABFBFFFF, 0xAFFBFFBF, 
		0xFFEFAAAB, 0x556FAFAF, 0x96FEFEFF, 0x6FEFFFEA, 0xFEFFFEAA, 0xEBFFFAAA, 0xBFFFEAAA, 0xEFFFAAAA, 0x7FFEAAAA, 
		0xBFFAAAAA, 0xFFEAAAAA, 0xFFAA9AAA, 0xFEAA56AA, 0xFEAA95AA, 0xFAAAA5AA, 0xFAAAAAAA, 0xFAAAAAAA, 0xFA805555, 
		0xFE40A555, 0xBE45A555, 0xBF5AA555, 0xBFAAA555, 0xFFA96555, 0xFFA95555, 0xFFE55555, 0xBFE55555, 0xBFE55555, 
		0xBFE55557, 0xBFE55557, 0xBFE5555B, 0xBFE5555F, 0xBFE55507, 0xBFE55400, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55500015, 0x55400001, 0x550003D0, 0x54000FFF, 0x500006FF, 0x400001FF, 0xDD0001FF, 0xFF00007F, 
		0xFD000005, 0xF4000000, 0xF0000000, 0x50000000, 0x57FEAAAA, 0x556FFF96, 0x5556FFE9, 0x55556BFF, 0x5555556F, 
		0x55555555, 0x14155555, 0x80155555, 0xC0055555, 0x40055555, 0x00050555, 0x00150455, 0x00543C00, 0x00503F41, 
		0x0000FF7F, 0x0001FDFD, 0xAAAFFFFF, 0xAAAAAAAA, 0x5AAAAAAA, 0xAAAAAAAA, 0xFFFEAAAA, 0x56FFFA6A, 0x5556BFA9, 
		0x55555BFF, 0x55555556, 0x55555555, 0x55455555, 0x55415555, 0x55415555, 0x41015555, 0x00015555, 0x00010056, 
		0xFFAABFFA, 0xAAAABFAA, 0xAAAAFEAA, 0xAAABFAAA, 0xAAAFEAAA, 0xAABEAAAA, 0xAABEAAAA, 0xEAFAAAAA, 0xFFEAAAAA, 
		0x6BEAAAAA, 0x6BEAAAAA, 0x6FAAAAAA, 0x6FAAAAAA, 0xBEAAAAAA, 0xBEAAAAAA, 0xFEAAAAAA, 0xAAAAA555, 0xAAAAA555, 
		0xAAAAA955, 0xAAAAA555, 0xAA9A5555, 0xA5955555, 0x5555555A, 0x5556555A, 0x55965AAA, 0x65A6AAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAFF, 0xAAAAAFF9, 0xAAAAFF95, 0xABFFE955, 0xAF000000, 0x6F400000, 0xAF400000, 0xAF400000, 
		0xAF800000, 0xABC00000, 0xABD00000, 0xABD00000, 0xABD00000, 0xABD00000, 0xABD00000, 0xEBD00000, 0xF6800000, 
		0xFE940000, 0x7FFD4000, 0x7FFFF540, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
		0x00000000, 0x00000000, 0x00000000, 0x00000140, 0x00001FD0, 0x0000EFE0, 0x0001BFF4, 0x0007FEBF, 0x000FEAAB, 
		0x001FEAAA, 0x000001EA, 0x000001EA, 0x000003EA, 0x000003EA, 0x000003EB, 0x000003EF, 0x000007FF, 0x000007FF, 
		0x00000BFF, 0x00001FFE, 0x00001FFA, 0x00007FFA, 0x0006FFEA, 0x400FFFAA, 0xC00FFEAA, 0xF00FFEAA, 0xA555AABF, 
		0xAAAAAABF, 0xAFAAAAAA, 0xBEAAAAAA, 0xBEAAAAAA, 0xFAAAAAAB, 0xEAAAAAAA, 0xEAAAAAAE, 0xAAAAAAAF, 0xAAAAAAAB, 
		0xAAAAABEA, 0xAAAAEBFE, 0xAAABFAFF, 0xAAAAFFAF, 0xAAAABEFF, 0xAABEAFAF, 0xFEAAAAAF, 0xAAAAAAAF, 0xAAAAAAAF, 
		0xAAAAAAAB, 0xAAAAAAAB, 0xEAAAAAAA, 0xFFAAAAAA, 0xBFFAAAAA, 0xAFBEAAAA, 0xEBEFEAAA, 0xFEFAFAAA, 0xBFBEAAAA, 
		0xAFFEAAAA, 0xFFFFAAAA, 0xEBFBEAAA, 0xE6FAFEAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 
		0xAAAAAAAB, 0xAAAAAAAF, 0xAAAAA9AF, 0xAAAAAAFE, 0xAAAAABFE, 0xAABFFFFA, 0xAAAFFF5A, 0xAAAAEA5A, 0xAAAAA656, 
		0xAAAAA595, 0xAAAAA965, 0xBFE55000, 0xBFE54000, 0xBFE90000, 0xFFF90000, 0xFFFA0900, 0xFFFE7FD5, 0xFAFFBF57, 
		0xAAFFBE57, 0xAABF9D5B, 0xAABFC5FF, 0xAAAFC5FF, 0xAAAFD5FF, 0xAAABF5FF, 0xAAABF5FE, 0xAAABF7FB, 0xAAABFFFF, 
		0x0000000F, 0x0000001F, 0x003ED03F, 0x00FFF000, 0x00FFF400, 0x00FFFD00, 0x403FC000, 0x40050000, 0x40000000, 
		0x40000000, 0x40000000, 0x4007C000, 0x0007F001, 0x4003FC01, 0xFA43FF05, 0xFFC1FF46, 0x50005FFC, 0xF40007F0, 
		0xFFD000D0, 0xFFC00000, 0x0F000000, 0x0000001D, 0x000000BD, 0x000000DF, 0x0D000007, 0x0FE40000, 0x1FFE0000, 
		0x3FFD0000, 0x7FFC0000, 0x53F00000, 0xF0000000, 0xF4000000, 0x00050016, 0x00050001, 0x00540740, 0x00003FD4, 
		0x00003FFF, 0x34000FFF, 0xFB40007F, 0xFFF4003C, 0xFFF00014, 0x7FC00001, 0x0F400015, 0x00000005, 0x00000000, 
		0x000000F4, 0x55000014, 0xFF1C0000, 0xFAAAAAAB, 0xEAAAAAFF, 0x6AAFFFEA, 0x7FFFFAA5, 0xD6AAAA55, 0x40695555, 
		0x00000055, 0x00000345, 0x400007F4, 0x50000FFF, 0x54000FFF, 0x55400FFD, 0x17C003FC, 0x07C00078, 0x07800000, 
		0x05000000, 0xFFEAA555, 0xEA555555, 0xA5555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x15555555, 0x15555555, 0x15555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x5BFFFFA0, 
		0x55AFFFF9, 0x5555ABFF, 0x5555555A, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x003FAAAA, 0x007FAAAA, 0x007EAAAA, 
		0x007EAAAA, 0x00FEAAAA, 0x00FEAAAA, 0x01FAAAAA, 0x01FAAAAA, 0x01FAAAAA, 0x01FAAAAA, 0x01FAAAAA, 0x01FAAAAA, 
		0x01FAAAAA, 0x01FAAAAA, 0x01FAAAAA, 0x01FAAAAA, 0xF801FAAA, 0xAC01FAAA, 0xAE01EAAA, 0xAF41EAAA, 0xAF41EAAA, 
		0xAB01EAAA, 0xAB41EAAA, 0xAF43EAAA, 0xAFEFEAAA, 0xBFFFFAAA, 0xFFE7FAAA, 0xEB43EAAA, 0xA741EAAA, 0xAB41FAAA, 
		0xABA5FEAA, 0xABF5FEAA, 0xAABFEBEB, 0xAAAFFFFA, 0xAFEBFBFF, 0xAFFEBEBF, 0xABEBEFA6, 0xAAFAFFE5, 0xAABEABF9, 
		0xAAAFAABD, 0xAAABEAA5, 0xAAAAFAA5, 0xABFABE95, 0xABFFEFA5, 0xAAFAFFE5, 0xAABABFD5, 0xAABEAAF5, 0xAAAFAAB9, 
		0x95BFAFAA, 0x556BAAAA, 0x955AAAAA, 0xE59AAAAA, 0xFD6AAAAA, 0x7E5AAAAA, 0x5A96AAAA, 0x55A6AAAA, 0x5565AAAA, 
		0x9555AAAA, 0x55556AAA, 0x556A6AAA, 0x556AAAAA, 0x555AAAAA, 0x556AAAAA, 0x55AAAAAA, 0xAAA6A959, 0xAAA5AA55, 
		0xAAA56A55, 0xAAA59695, 0xAAA9A596, 0xAAA9695A, 0xAAA96AAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x6AABFBFF, 0x6AABF557, 0x5AABF400, 0x5AAAF400, 
		0x56ABF400, 0xA6AAF400, 0xAAAAF400, 0xAAAAF400, 0xAAAAF400, 0xAAABF900, 0xAAAAFF80, 0xAAAAFFF4, 0xAAABFFFF, 
		0xAAABFDAF, 0xAAABF957, 0xAAABFD55, 0xFF40B017, 0xF5500017, 0xD1540017, 0x055401F7, 0x055400F5, 0x057F00FF, 
		0x057F03FF, 0x05FF01FF, 0x15FF001F, 0x16FF000D, 0x17FF0000, 0x17FC0000, 0xD0FC0000, 0xF0100070, 0xFD0001F7, 
		0xBFD001FF, 0xF4000003, 0xF4000001, 0xF001D000, 0xF407FC00, 0xD00FFF40, 0x400FFFC0, 0x4000BD00, 0x40003C00, 
		0x00000000, 0x00001400, 0x00003D74, 0x00003E7F, 0x00007D7F, 0x000015FD, 0xC00075FC, 0xF00075FD, 0xFF3F0000, 
		0x57FF0000, 0x02C90015, 0x00000000, 0x00000000, 0x00000007, 0x00100007, 0x00780002, 0x00BFF000, 0x00FFF000, 
		0x01FFC000, 0x01FFC000, 0x00574000, 0x00010001, 0x0000000F, 0x00001000, 0x14000001, 0x54000005, 0x54000005, 
		0x00000015, 0x00000015, 0x1FF40055, 0xFFFC0155, 0xEFF40155, 0x00F00556, 0x00500556, 0x00000556, 0x0000056A, 
		0x0100156A, 0xF7C0156A, 0xFFE015AA, 0x7FD055AA, 0x55555555, 0x5A555555, 0x5A555555, 0x6A555555, 0x6A555555, 
		0x6A555555, 0x6A555555, 0x69555555, 0xA9555555, 0xA9555555, 0xA9555555, 0xA9555555, 0xA5555555, 0xA5555555, 
		0x95555555, 0x95555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x01FAAAAA, 0x01FAAAAA, 0x00FAAAAA, 0x00BAAAAA, 0x00BAAAAA, 0x00BAAAAA, 0x007EAAAA, 0x007EAAAA, 0x003EAAAA, 
		0x003FAAAA, 0x001FAAAA, 0x001FAAAA, 0x000FAAAA, 0x000BEAAA, 0x0007EAAA, 0x0007EAAA, 0xBFFFFEAA, 0xFFD9BEAA, 
		0xAB403EAA, 0xABD01FEA, 0xABD01FFA, 0xAAD01FFA, 0xAAF01BFA, 0xABF001FE, 0xABF001BF, 0xAAF0006F, 0xAAF0006F, 
		0xAAF0001B, 0xAAB0001A, 0xAAB40006, 0xAAB00001, 0xAAB40000, 0xAAABEAA9, 0xAAAABAA9, 0xAABEBEAA, 0xAAAFFFAA, 
		0xAAABFFEA, 0xAAABFFFA, 0xAAAAFFFF, 0xAAAABFFF, 0xAAAAAFEF, 0xAAAAABFB, 0xEAAAAAFF, 0xFAAAAABF, 0xFEAAAAAF, 
		0xBEAAAAAB, 0xBFAAAAAA, 0x6FFAAAAA, 0x55AAAAAA, 0x55AAAAAA, 0x56AAAAAA, 0x96AAAAAA, 0x96AAAAAA, 0x95AAAAAA, 
		0xA5AAAAAA, 0xE6AAAAAA, 0xFAAAAAAA, 0xEAAAAAAA, 0xEAAAAAAA, 0xFAAAAAAA, 0xFEAAAAAA, 0xFFAAAAAA, 0xBFAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAF, 0xAAAAAABF, 0xAAAAAFFF, 0xAAAAFFFE, 0xAAAFFF95, 
		0xAAABFFF9, 0xAAABFBFF, 0xAAAFE5BF, 0xAAAFE55B, 0xAAAF9556, 0xAABF5556, 0xAAFD5555, 0xAAF95555, 0xABF55555, 
		0xAFD55555, 0xFF555555, 0xFE555555, 0xF955556A, 0xE5555BFF, 0x95556FAA, 0x57F400FF, 0x56FD00FF, 0x6ABFD01F, 
		0xFAAFE500, 0xFDABF554, 0xFE5AB655, 0xFF56AA95, 0x6FD5AAA9, 0x57E55AAA, 0x56F556AA, 0x55B956AA, 0x555555AA, 
		0x5565555A, 0xABFD5556, 0xFFBE5555, 0xAAAF5555, 0xFC001BF4, 0xFC001FF4, 0x500057F4, 0x0000FDF9, 0x00003F7F, 
		0x40001D0F, 0x50000C3D, 0x5550001D, 0x95555000, 0xA5555540, 0x6A555555, 0x55555555, 0x95555555, 0xA9555555, 
		0x6A955555, 0x56AAA955, 0x0001FC00, 0x0003FD00, 0x0001FD00, 0x7400FD00, 0xF4007C00, 0x00001C00, 0x00000000, 
		0x00007550, 0x00007FFC, 0x0000FFFC, 0x5000FFFC, 0x5540FFF4, 0x555007F4, 0x555503D0, 0x55555500, 0x55555555, 
		0x3F4056AA, 0x00015AAA, 0x00055AAA, 0x00055AA9, 0x00155AA5, 0x00555A55, 0x00556A55, 0x01556A55, 0x0156AA95, 
		0x0556AA55, 0x0556A955, 0x0556A555, 0x1556A555, 0x555AA555, 0x556AA555, 0x556A9555, 0x95555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555695, 0x555BFFE5, 0x555BBFF5, 0x5555BFD5, 0x5555FF56, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x0003FAAA, 0x0001FEAA, 0x0001FEAA, 0x0001FEAA, 0x0000BEAA, 0x0000BEAA, 
		0x0000FEAA, 0x0000FEAA, 0x0000FEAA, 0x00007EAA, 0x00007EAA, 0x00007FAA, 0x00002FAA, 0x00001FAA, 0x00001FAA, 
		0x00000FAA, 0xAAB40000, 0xAABC0000, 0xAABD0000, 0xAAAE0000, 0xAAAE0000, 0xAAAE0000, 0xAAAE0000, 0xAAAE0000, 
		0xAAAE0000, 0xAAAE0000, 0xAAAE0000, 0xAAAE0000, 0xAAAE0000, 0xAAAF0000, 0xAAAF4000, 0xAAAF4000, 0x1FFEAAAA, 
		0x55BFFFEA, 0x555FFFFA, 0x555FFFAA, 0x556EAFAA, 0x557EAABA, 0x55BAAABA, 0x55FAABFE, 0x56FAABFE, 0x57EAABFF, 
		0x1FEAAAEB, 0x1FAAAAF5, 0x1BAAAAB5, 0x1FAAAAB5, 0x2FAAAFA6, 0x7EAAAFEE, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0x5AAAAAAA, 0x56AAAAAA, 0x55AAAAAA, 0x96AAAAAA, 
		0x55AAAAAA, 0x55AAAAAA, 0x556AAAAA, 0x955AAAAA, 0xAAABFFEA, 0xAFFFFFF9, 0xABFFF5FE, 0xAAFFF41F, 0xAABFF401, 
		0xAAFFF800, 0xAAFFFD01, 0xAAFFFD07, 0xAAABFD1F, 0xAAABFF7E, 0xAAAAAFFF, 0xAAAAAFEB, 0xAAAAAFEF, 0xAABEAFFF, 
		0xAAAEABFF, 0xAAABAAFF, 0x5556FAAA, 0x556FEAAA, 0x56FAAAAA, 0x4BAAAAAA, 0x5EAAAAAA, 0x7AAAAAAA, 0xFAEAAAAA, 
		0xEBEAAAAA, 0xAFFEAAAA, 0xBFAEAAAA, 0xFFBEAAAA, 0xFFBAAAAA, 0xFFBAAAFB, 0xFFFAABFD, 0xEFEABFD0, 0xEEAABD50, 
		0xAABF9555, 0xAAAF9555, 0xAAAF9555, 0xAAABD555, 0xAAABE555, 0xAAABD555, 0xAAABE555, 0xAAAAF555, 0xAAAAF555, 
		0xAAABF555, 0xAABFE555, 0xAFFA5555, 0xFFD55555, 0x55055555, 0x141F5555, 0x5507FE55, 0x556AAAA5, 0x5556AAAA, 
		0x5555556A, 0x5555555A, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x6AA55555, 0xAAAAA955, 0xAAA95AA9, 
		0x6AAA555A, 0x595AA556, 0x5555A956, 0x5555595A, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x556A5555, 0x556A5555, 0x596A5555, 0x59A95555, 0xA9A95555, 0xAAA95555, 
		0xAAA55555, 0x6A955555, 0x5A555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x5556FF5A, 0x5557FD6A, 0x5556E95A, 0x5555556A, 0x5555556A, 0x55555569, 0x555555A5, 0x555555A5, 
		0x55555695, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0xA5555555, 
		0xA5555555, 0x95555555, 0x95555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x00001BEA, 0x00001FEA, 0x00000FEA, 
		0x00000BEA, 0x00000BEA, 0x00000BEA, 0x00000BEA, 0x00000BEA, 0x00000BEA, 0x00000BEA, 0x00000BEA, 0x00000BEA, 
		0x000007AA, 0x000007AA, 0x000007AA, 0x000007AA, 0xAAAF4001, 0xAAAF4003, 0xAAAF4007, 0xAAAF0007, 0xAABE0007, 
		0xAABE0007, 0xAABD0007, 0xAAFD0007, 0xAAF8000B, 0xAAF9000F, 0xAAF8000F, 0xABF4000F, 0xABF4000F, 0xABE0000F, 
		0xAF90001F, 0xAE90000F, 0xFEAAABFF, 0xFEAAABEF, 0xFAAAAAEB, 0xFAAAFEBA, 0xEAAABFBE, 0xEAAABBEE, 0xEAABBEFE, 
		0xEAABFEBF, 0xEAABFFAF, 0xEAABFFAA, 0xAAAAFFEA, 0xAAAAFFEA, 0xAAAABEAA, 0xAAAAAFAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0x955AAAAA, 0xE656AAAA, 0xE6AAAAAA, 0xE6AAAAAA, 0xA5AAAAAA, 0xA5AAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 
		0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAAAAAAAA, 0xAABFAAFF, 0xAABFEAFF, 
		0xAAAFFAEB, 0xAAAFFAEB, 0xAAAFFAFA, 0xAAAFAAFA, 0xAAAFEAFA, 0xAAABEAFA, 0xAAAAAAFA, 0xAAAAAAFA, 0xAAAAAAFA, 
		0xAAAAAAFA, 0xAAAAABFA, 0xAAAAABFA, 0xAAAAABFA, 0xAAAAABAA, 0xFEAAF555, 0xAAAAE555, 0xAAABC015, 0xAABF8101, 
		0xAABFBBD4, 0xAAFD1FFE, 0xAAF957FF, 0xABF555BF, 0xABF55555, 0xABE55555, 0xAFD55555, 0xAF955555, 0xBF955555, 
		0xBF555555, 0xAF555555, 0xAF555555, 0x55556FE5, 0x555547FD, 0x0555407F, 0x55555417, 0x00155551, 0x50555554, 
		0xFDFD5555, 0xFFFFA555, 0x5FFFEA55, 0x4147FEE5, 0x40017FFF, 0x400019BF, 0x4000001B, 0x40000001, 0x40000000, 
		0x40000000, 0x55555555, 0x55555555, 0xE5555555, 0xFF555555, 0xAFF95555, 0x057FA555, 0x4007FF55, 0x55006FF9, 
		0x5550057F, 0x55540007, 0x95554045, 0xF9555555, 0xFFD55555, 0xBFF95555, 0x16FF5555, 0x0017F955, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x95555555, 0xFE555555, 
		0x7FE95555, 0x55BF9555, 0x5557FE55, 0x5555B955, 0x55555555, 0x555556BD, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 
		0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555, 0x55555555
	menu2address: 0x00000000
			
	selectborder1: .byte
		0xDF,0xFF,0x75,0x55,0xD0,0x00,0xD0,0x00,
	  0xD0,0x00,0xD0,0x00,0xD0,0x00,0xD0,0x00,
	  0xD0,0x00,0xD0,0x00,0xD0,0x00,0xD0,0x00,
	  0xD0,0x00,0xD0,0x00,0x75,0x55,0xDF,0xFF,
	  0xFF,0xFF,0x55,0x55,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x55,0x55,0xFF,0xFF
	selectborder2: .byte
		0xFF,0xFF,0x55,0x55,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	  0x00,0x00,0x00,0x00,0x55,0x55,0xFF,0xFF,
	  0xFF,0xF7,0x55,0x5D,0x00,0x07,0x00,0x07,
	  0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,
	  0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,
	  0x00,0x07,0x00,0x07,0x55,0x5D,0xFF,0xF7
	selectborderpalette: .word 0x00FF00FF
	selectborderaddress: .word 0x00000000
	loading: .word 
		0x000000ff,0xffffff00,0xffffff00,0x0000ffff,0x00ffffff,0xff0000ff,0xffffff00, 
		0x000000ff,0xff00ff00,0xff00ff00,0x00ff00ff,0x0000ff00,0xff00ffff,0x0000ff00, 
		0x000000ff,0xff00ff00,0xffffff00,0x00ff00ff,0x0000ff00,0xffff00ff,0xff00ff00, 
		0xffffff00,0xffffff00,0xff00ff00,0x0000ffff,0x00ffffff,0xff0000ff,0xffffff00 

	stringtest: .byte 0x43, 0x68, 0x55, 0x50, 0x41, 0x5F, 0x43, 0x55
	choosePieceString1: .byte 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20
		0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x21 
	choosePieceString2: .byte 0x9A, 0xC4, 0xC4, 0xC4, 0xD2, 0xC4, 0xC4, 0xC4, 0xD2, 0xC4, 0xC4, 0xC4, 0xBF
	choosePieceString3: .byte 0x20, 0x31, 0x20, 0x20, 0x20, 0x32, 0x20, 0x20, 0x20, 0x33, 0x20, 0x20, 0x20						  
	choosePieceString4: .byte 0xB3, 0x20, 0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0xB3	
	choosePieceString5: .byte 0xC0, 0xC4, 0xC4, 0xC4, 0xD0, 0xC4, 0xC4, 0xC4, 0xD0, 0xC4, 0xC4, 0xC4, 0xB9

	chooseDifficultyString1: .byte 0x20, 0x31, 0x2E, 0x20, 0x56, 0x65, 0x72, 0x73, 0x75, 0x73 # 10
	chooseDifficultyString2: .byte 0x20, 0x32, 0x2E, 0x20, 0x45, 0x61, 0x73, 0x79 # 8
	chooseDifficultyString3: .byte 0x00, 0x33, 0x2E, 0x20, 0x4D, 0x65, 0x64, 0x20, 0x28, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x29 # 16
	chooseDifficultyString4: .byte 0x00, 0x34, 0x2E, 0x20, 0x48, 0x61, 0x72, 0x64, 0x20, 0x3c, 0x44, 0x4C, 0x43, 0x3e # 14

	playerwinstring: .byte 	0x50, 0x31, 0x20, 0x57, 0x69, 0x6e, 0x73
	cpuwinstring: .byte 	0x50, 0x32, 0x20, 0x57, 0x69, 0x6e, 0x73
	mainmenustring1: .byte 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x3c, 0x45, 0x3e # 
	# sound
		CONT:		.word 55
		INIT:		.word 0
		INSTRUMENTO:	.word 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 

		DELAY:		.word 0, 240, 0, 240, 240, 0, 240, 0, 240, 0, 480, 0, 120, 120, 0, 240, 0, 120, 120, 240, 0, 240, 0, 240, 0, 240, 240, 0, 240, 0, 240, 0, 0, 240, 240, 240, 240, 0, 480, 240, 0, 0, 0, 0, 240, 0, 480, 240, 0, 240, 0, 0, 0, 0, 240, 0, 120, 120, 0, 0, 0, 240, 0, 0, 240, 240, 0, 0, 240, 
		NOTAS:		.word  60, 64, 67, 91, 91, 60, 91, 57, 60, 64, 91, 57, 89, 88, 53, 57, 60, 89, 91, 88, 53, 86, 55, 59, 62, 84, 86, 55, 88, 60, 84, 64, 67, 79, 60, 57, 60, 64, 57, 72, 77, 81, 84, 53, 57, 60, 53, 86, 55, 74, 79, 83, 59, 62, 86, 67, 69, 74, 79, 83, 67, 72, 76, 48, 55, 67, 60, 64, 76, 
		DURACAO: 	.word 239, 239, 239, 227, 227, 119, 683, 239, 239, 239, 113, 119, 113, 341, 239, 239, 239, 113, 227, 227, 119, 455, 239, 239, 239, 227, 227, 119, 227, 239, 227, 239, 239, 911, 119, 239, 239, 239, 119, 911, 911, 911, 911, 239, 239, 239, 119, 119, 239, 119, 119, 119, 119, 119, 119, 
		VOLUME:		.word  80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 
	#
	
	boardSelectionPos: .word 0
	soundEffects: .word 0x1F300250, 0x1F500350, 0x1F450150, 0x1f500250, 0x1f270350, 0x1f300150, 0x1f400150,0x1f500250,
	moves: .word 2, 12, 13
	GAMEMODE: .word 0
	willAPieceDie: .byte 0x00
	pieceToDie: .byte 0x00


.text

	.macro	mjal(%label)
		la tp, %label
		jalr ra, tp, 0
	.end_macro

	.macro	sound(%base_note, %note, %duration, %instrument, %volume)
		lw a0, 0(%note)
		add a0, a0, %base_note
		lw a1, 0(%duration)
		li a2, 80
		li a3, 250
		mjal(SOUND)
	.end_macro

	.macro	sleep(%duration)
			lw a0, 0(%duration)
			mjal(SLEEP)
	.end_macro
	# MAIN



		mjal(clearScreen)
		mjal(chooseColor)
		mjal(initialclearScreen)
		mjal(showloading)
		mjal(initializeFont)
		mjal(drawBoardBG)
		mjal(initializeBorder)
		mjal(initializeSprites)
		mjal(initializeMainMenu)
		mjal(clearScreen2)
		
		mjal(showMenu)
		mjal(clearScreen)
		mjal(chooseDifficulty)

		mjal(clearScreen)
		mjal(choosePiece)

		mjal(clearScreen)
		
		mjal(copyBG3to1)
		mjal(drawAllPieces)
		
		gameloop:
			mjal(drawp1)

			piecesloop1:
			li a1 0
			mjal(selectBoard)
			li a1 0
			mjal(checkPieceValid)
			li t0, 0xff
			beq a1, t0, piecesloop1 # if there wasnt any valid piece
			mv s0, a0 # the selected piece 
			li a0, 2
			li a1, 2
			mjal(SEbox)
			mv a0, s0
			mjal(generateMoves)
			movesLoop1:
			li a1 1
			mjal(selectBoard)
			mv s1, a0 # the selected place 
			la a1, moves
			mjal(checkMoveValid)
			beqz a0, movesLoop1
			li a0, 2
			li a1, 2
			mjal(SEbox)
			mv a0, s0 # selected piece
			mv a1, s1 # selected place
			mjal(movepiece)
			li a0, 1
			li a1, 1
			mjal(SEbox)
			mjal(checkVictory)
			bnez a0, winnerwinner

			mjal(drawp2)
			la t0, GAMEMODE
			lw t0, 0(t0)
			li t1, 1
			beq t0, t1, randomAI
			li t1, 2
			beq t0, t1, level1AI
			li t1, 3
			beq t0, t1, level2AI
			
			piecesloop2:
			li a1 0
			mjal(selectBoard)
			li a1 1
			mjal(checkPieceValid)
			li t0, 0xff 
			beq a1, t0, piecesloop2
			mv s0, a0
			li a0, 2
			li a1, 2
			mjal(SEbox)
			mv a0, s0
			mjal(generateMoves) 
			movesLoop2:
			li a1 1
			mjal(selectBoard)
			mv s1, a0
			la a1, moves
			mjal(checkMoveValid)
			beqz a0, movesLoop2
			li a0, 2
			li a1, 2
			mjal(SEbox)
			mv a0, s0
			mv a1, s1
			mjal(movepiece)
			mjal(checkVictory)
			bnez a0, winnerwinner
			j gameloop

			randomAI:
			randompiece:
			li a7, 30
			ecall
			la a0, random
			li a7, 40
			ecall

			lw a0, random
			li a1, 12
			li a7, 42
			ecall
			addi a0, a0, 1
			mjal(getpiece)
			mv s0, a0
			mjal(generateMoves)
			la t0, moves
			lw t1, 0(t0)
			lw s9, 4(t0)
			lw s10, 8(t0)
			beqz t1, randompiece
			randommove:
			lw a0, random
			mv a1, t1
			li a7, 42
			ecall
			slli a0, a0, 2
			add t0, t0, a0
			lw s1, 4(t0)
			li a0, 2
			li a1, 2
			mjal(SEbox)
			mv a0, s0
			mv a1, s1
			mjal(movepiece)

			mjal(checkVictory)
			bnez a0, winnerwinner
			j gameloop

			level1AI:
			mjal(checkVictory)
			bnez a0, winnerwinner
			j gameloop

			level2AI:
			mjal(checkVictory)
			bnez a0, winnerwinner
			j gameloop

		winnerwinner:
			bnez a1, P2WINS
			P1WINS:
			mjal(clearScreen)
			li a0, 96
			mv a1, a0
			mjal(getaddress)
			mv a1, a0
			lw a0, playerdameaddress
			mjal(drawtile)
			addi a1, a1, 16
			lw a0, playerpieceaddress
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			lw a0, playerdameaddress
			mjal(drawtile)
			li a0, 96
			li a1, 112
			mjal(getaddress)
			mv a1, a0
			lw a0, playerpieceaddress
			mjal(drawtile)
			addi a1, a1, 128
			mjal(drawtile)
			
			li a0, 112
			li a1, 112
			mjal(getaddress)
			mv a2, a0
			li a1, 7
			lw a0, playerwinstring
			mjal(drawString)

			li a0, 96
			li a1, 128
			mjal(getaddress)
			mv a1, a0
			lw a0, playerdameaddress
			mjal(drawtile)
			addi a1, a1, 16
			lw a0, playerpieceaddress
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			lw a0, playerdameaddress
			mjal(drawtile)
			P2WINS:
			mjal(clearScreen)
			li a0, 96
			mv a1, a0
			mjal(getaddress)
			mv a1, a0
			lw a0, cpudameaddress
			mjal(drawtile)
			addi a1, a1, 16
			lw a0, cpupieceaddress
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			lw a0, cpudameaddress
			mjal(drawtile)
			li a0, 96
			li a1, 112
			mjal(getaddress)
			mv a1, a0
			lw a0, cpupieceaddress
			mjal(drawtile)
			addi a1, a1, 128
			mjal(drawtile)
			
			li a0, 112
			li a1, 112
			mjal(getaddress)
			mv a2, a0
			li a1, 7
			la a0, cpuwinstring
			mjal(drawString)

			li a0, 96
			li a1, 128
			mjal(getaddress)
			mv a1, a0
			lw a0, cpudameaddress
			mjal(drawtile)
			addi a1, a1, 16
			lw a0, cpupieceaddress
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			mjal(drawtile)
			addi a1, a1, 16
			lw a0, cpudameaddress
			mjal(drawtile)
			# something
		mjal(EXIT)
		
		chooseDifficulty:
			addi sp, sp, -4
			sw ra, 0(sp)
			li a0, 32
			li a1, 32
			mjal(getaddress)
			mv a2, a0
			li a1, 10
			la a0, chooseDifficultyString1
			mjal(drawString)

			li a0, 32
			li a1, 64
			mjal(getaddress)
			mv a2, a0
			li a1, 8
			la a0, chooseDifficultyString2
			mjal(drawString)

			li a0, 32
			li a1, 96
			mjal(getaddress)
			mv a2, a0
			li a1, 16
			la a0, chooseDifficultyString3
			mjal(drawString)

			li a0, 32
			li a1, 128
			mjal(getaddress)
			mv a2, a0
			li a1, 14
			la a0, chooseDifficultyString4
			mjal(drawString)


			chooseDiffKeyboard:
			li t1,0xFF200000
			lw t0,0(t1)
			andi t0,t0,0x0001		# Le bit de Controle Teclado
				beq t0,zero,chooseDiffKeyboard   	   	# Se nÔøΩo hÔøΩ tecla pressionada PULA
				lw t2,4(t1)
				li t0, 49
				beq t2, t0, Diff1
				li t0, 50
				beq t2, t0, Diff2
				j chooseDiffKeyboard
			Diff1:
			la t0, GAMEMODE
			li t1, 0
			sw t1, 0(t0)
			j DiffEND
			Diff2:
			la t0, GAMEMODE
			li t1, 1
			sw t1, 0(t0)

			DiffEND:
			lw ra, 0(sp)
			addi sp, sp, 4
			jalr zero, ra, 0
		chooseColor:
			addi sp, sp, -4
			sw ra, 0(sp)
			# draw first m-a-n-u-a-l-l-y
			#1#
			li s0, 0xFF000000
			li s1, 0xFF000140
			li s2, 0xFF000280
			li s3, 0xFF0003C0
			li t1, 0x00FFFF00
			sw t1, 0(s0)
			li t1, 0x00FF0000
			sw t1,0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 8
			addi s1, s1, 8
			addi s2, s2, 8
			addi s3, s3, 8
			li t1, 0x00000000
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0x5B5B5B5B
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0xADADADAD
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0xFFFFFFFF
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)

			li s0, 0xFF000640
			li s1, 0xFF000780
			li s2, 0xFF0008C0
			li s3, 0xFF000A00
			li t1, 0x00FFFFFF
			sw t1, 0(s0)
			li t1, 0xFF000000
			sw t1,0(s1)
			li t1, 0x0000FFFF
			sw t1, 0(s2)
			li t1, 0x00FFFFFF
			sw t1, 0(s3)
			addi s0, s0, 8
			addi s1, s1, 8
			addi s2, s2, 8
			addi s3, s3, 8
			li t1, 0x00000000
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0x9C9C9C9C
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0xAFAFAFAF
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0xFFFFFFFF
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)

			li s0, 0xFF000C80
			li s1, 0xFF000DC0
			li s2, 0xFF000F00
			li s3, 0xFF001040
			li t1, 0xFFFFFF00
			sw t1, 0(s0)
			li t1, 0xFFFF0000
			sw t1,0(s1)
			li t1, 0xFF000000
			sw t1, 0(s2)
			li t1, 0xFFFFFF00
			sw t1, 0(s3)
			addi s0, s0, 8
			addi s1, s1, 8
			addi s2, s2, 8
			addi s3, s3, 8
			li t1, 0x48484848
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0x9A9A9A9A
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0xE3E3E3E3
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0xF6F6F6F6
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)

			li s0, 0xFF0012C0
			li s1, 0xFF001400
			li s2, 0xFF001540
			li s3, 0xFF001680
			li t1, 0x000000FF
			sw t1, 0(s0)
			li t1, 0x00FF00FF
			sw t1,0(s1)
			li t1, 0x00FFFFFF
			sw t1, 0(s2)
			li t1, 0x00FF0000
			sw t1, 0(s3)
			addi s0, s0, 8
			addi s1, s1, 8
			addi s2, s2, 8
			addi s3, s3, 8
			li t1, 0x08080808
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0x10101010
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0x2C2C2C2C
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)
			addi s0, s0, 4
			addi s1, s1, 4
			addi s2, s2, 4
			addi s3, s3, 4
			li t1, 0x76767676
			sw t1, 0(s0)
			sw t1, 0(s1)
			sw t1, 0(s2)
			sw t1, 0(s3)


			chooseColorKeyboard:
			li t1,0xFF200000
			lw t0,0(t1)
			andi t0,t0,0x0001		# Le bit de Controle Teclado
				beq t0,zero,chooseColorKeyboard   	   	# Se nÔøΩo hÔøΩ tecla pressionada PULA
				lw t2,4(t1)
				li t0, 49
				beq t2, t0, Color1
				li t0, 50
				beq t2, t0, Color2
				li t0, 51
				beq t2, t0, Color3
				li t0, 52
				beq t2, t0, Color4
				j chooseColorKeyboard
			Color1:
			li a0, 2
			li a1, 2
			mjal(SEbox)
			la t0, COLOR_PALETTE
			li t1, 0xFFAD5B00
			sw t1, 0(t0)
			j chooseColorEND
			Color2:
			li a0, 2
			li a1, 2
			mjal(SEbox)
			la t0, COLOR_PALETTE
			li t1, 0xFFAF9C00
			sw t1, 0(t0)
			j chooseColorEND
			Color3:
			li a0, 2
			li a1, 2
			mjal(SEbox)
			la t0, COLOR_PALETTE
			li t1, 0xF6E39A48
			sw t1, 0(t0)
			j chooseColorEND
			Color4:
			li a0, 2
			li a1, 2
			mjal(SEbox)
			la t0, COLOR_PALETTE
			li t1, 0x762C1008
			sw t1, 0(t0)
			chooseColorEND:
			lw ra, 0(sp)
			addi sp, sp, 4
			jalr zero, ra, 0
		choosePiece:
			addi sp, sp, -4
			sw ra, 0(sp)

			li a0, 16
			li a1, 16
			mjal(getaddress)
			mv a2, a0 
			li a1, 18 #size
			la a0, choosePieceString1
			mjal(drawString)

			li a0, 48
			li a1, 96
			mjal(getaddress)
			mv a2, a0
			li a1, 13
			la a0, choosePieceString3
			mjal(drawString)


			li a0, 80
			li a1, 96
			mjal(getaddress)
			mv a1, a0
			lw a0, playerpiece1address
			mjal(drawtile)

			li a0, 80
			li a1, 112
			mjal(getaddress)
			mv a1, a0
			lw a0, cpupiece1address
			mjal(drawtile)

			li a0, 96
			li a1, 104
			mjal(getaddress)
			mv a1, a0
			lw a0, playerpiece1dameaddress
			mjal(drawtile)

			li a0, 144
			li a1, 96
			mjal(getaddress)
			mv a1, a0
			lw a0, playerpiece2address
			mjal(drawtile)

			li a0, 144
			li a1, 112
			mjal(getaddress)
			mv a1, a0
			lw a0, cpupiece2address
			mjal(drawtile)

			li a0, 160
			li a1, 104
			mjal(getaddress)
			mv a1, a0
			lw a0, playerpiece2dameaddress
			mjal(drawtile)

			li a0, 208
			li a1, 96
			mjal(getaddress)
			mv a1, a0
			lw a0, playerpiece3address
			mjal(drawtile)

			li a0, 208
			li a1, 112
			mjal(getaddress)
			mv a1, a0
			lw a0, cpupiece3address
			mjal(drawtile)

			li a0, 224
			li a1, 102
			mjal(getaddress)
			mv a1, a0
			lw a0, playerpiece3dameaddress
			mjal(drawtile)
			
			choosePieceKeyboard:
			li t1,0xFF200000
			lw t0,0(t1)
			andi t0,t0,0x0001		# Le bit de Controle Teclado
				beq t0,zero,choosePieceKeyboard   	   	# Se nÔøΩo hÔøΩ tecla pressionada PULA
				lw t2,4(t1)
				li t0, 49
				beq t2, t0, Piece1
				li t0, 50
				beq t2, t0, Piece2
				li t0, 51
				beq t2, t0, Piece3
				j choosePieceKeyboard
			Piece1:
			li a0, 2
			li a1, 2
			mjal(SEbox)
			la t0, playerpieceaddress
			lw t1, playerpiece1address
			sw t1, 0(t0)
			la t0, cpupieceaddress
			lw t1, cpupiece1address
			sw t1, 0(t0)
			la t0, playerdameaddress
			lw t1, playerpiece1dameaddress
			sw t1, 0(t0)
			la t0, cpudameaddress
			lw t1, cpupiece1dameaddress
			sw t1, 0(t0)

			j choosePieceEND
			Piece2:
			li a0, 2
			li a1, 2
			mjal(SEbox)
			la t0, playerpieceaddress
			lw t1, playerpiece2address
			sw t1, 0(t0)
			la t0, cpupieceaddress
			lw t1, cpupiece2address
			sw t1, 0(t0)
			la t0, playerdameaddress
			lw t1, playerpiece2dameaddress
			sw t1, 0(t0)
			la t0, cpudameaddress
			lw t1, cpupiece2dameaddress
			sw t1, 0(t0)

			j choosePieceEND
			Piece3:
			li a0, 2
			li a1, 2
			mjal(SEbox)
			la t0, playerpieceaddress
			lw t1, playerpiece3address
			sw t1, 0(t0)
			la t0, cpupieceaddress
			lw t1, cpupiece3address
			sw t1, 0(t0)
			la t0, playerdameaddress
			lw t1, playerpiece3dameaddress
			sw t1, 0(t0)
			la t0, cpudameaddress
			lw t1, cpupiece3dameaddress
			sw t1, 0(t0)

			choosePieceEND:

			lw ra, 0(sp)
			addi sp, sp, 4
			jalr zero, ra 0


		# will accept a piece and generate moves for it
		# i guess, probably, hopefully
		generateMoves:
			addi sp, sp, -12
			sw s0, 0(sp)
			sw t0, 4(sp)
			sw ra, 8(sp)

			la t0, moves
			li s0, 0
			sw s0, 0(t0) # erase previous moves

			mv s0, a0 # the piece
			mjal(getpieceisdame)
			bnez a0, generateMovesDames
			mv a0, s0
			mjal(getpieceteam)
			bnez a0, generateMovesCPU
			generateMovesPlayer:
				li t0, 0x07 # mask for x
				and t0, s0, t0 # x of the piece
				beqz t0, diagUR
				mv a0, s0
				li a1, -1 #L
				li a2, -1 #U
				mjal(diag)
				bnez a0, generateMovesEND
				beq a0, t0, generateMovesEND
				diagUR:
				mv a0, s0
				li a1, 1
				li a2, -1
				mjal(diag)
				j generateMovesEND

			generateMovesCPU:
				li t0, 0x07 # mask for x
				and t0, s0, t0 # x of the piece
				beqz t0, diagBR
				mv a0, s0
				li a1, -1 #L
				li a2, 1 #B
				mjal(diag)
				bnez a0, generateMovesEND
				li a0, 7
				beq a0, t0, generateMovesEND
				diagBR:
				mv a0, s0
				li a1, 1
				li a2, 1
				mjal(diag)
				j generateMovesEND
			generateMovesDames:
				li t0, 0x07
				and t0, s0, t0
				beqz t0, label2
				li t0, 0x38
				and t0, s0, t0
				srli t0, t0, 3
				li a0, 7
				beq t0, a0, label1
				mv a0, s0
				li a1, -1
				li a2, 1
				mjal(diag)

				label1:
				li t0, 0x38
				and t0, s0, t0
				srli t0, t0, 3
				beqz t0 label2

				mv a0, s0
				li a1, -1
				li a2, -1
				mjal(diag)
				label2:
				li t0, 0x38
				and t0, s0, t0
				srli t0, t0, 3
				li a0, 7
				beq t0, a0, label3

				mv a0, s0
				li a1, 1
				li a2, 1
				label3:
				li t0, 0x38
				and t0, s0, t0
				srli t0, t0, 3
				beqz t0, generateMovesEND 
				li t0, 0x07
				and t0, s0, t0
				li a0, 7
				beq t0, a0 generateMovesEND
				mv a0, s0
				li a1, 1
				li a2, -1

			generateMovesEND:
				lw s0, 0(sp)
				lw t0, 4(sp)
				lw ra, 8(sp)
				addi sp, sp, 12
				jalr zero, ra, 0

		# a0 = piece
		# a1 = x 
		# a2 = y
		diag:
				addi sp, sp, -80
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw s2, 8(sp)
					sw s3, 12(sp)
					sw s4, 16(sp)
					sw s5, 20(sp)
					sw s6, 24(sp)
					sw s7, 28(sp)
					sw s8, 32(sp)
					sw s9, 36(sp)
					sw s10, 40(sp)
					sw s11, 44(sp)
					sw t0, 48(sp)
					sw t1, 52(sp)
					sw t2, 56(sp)
					sw t3, 60(sp)
					sw t4, 64(sp)
					sw t5, 68(sp)
				 	sw t6, 72(sp)
					sw ra, 76(sp)

				mv s0, a0
				mjal(getpieceteam)
				mv s6, a0 # team
				mv s4, a1 
				mv s5, a2 
				li t0, 0x07 # mask for x
				and t0, s0, t0 # x of the piece
				mv s1, t0 # X
				li t0, 0x38
				and t0, s0, t0 # y of the piece
				srli t0, t0, 3
				mv s2, t0 # Y

				add t0, s2, s5
				add t1, s1, s4
				slli t0, t0, 3
				add a0, t0, t1 # position 
				mv s3, a0 # store the position
				mjal(getpiecefromplace)
				li t0, 0xFF
				bne a1, t0, itsapiece
				itsnothingUL:
				la t0, moves
				lw t1, 0(t0)
				addi t1, t1, 1
				sw t1, 0(t0) # add the number of moves 
				slli t1, t1, 2  # get index to add
				add t0, t1, t0
				sw s3, 0(t0) # store new move
				j diagEND1

				itsapiece:
				mv t5, a0 # backup 
				mjal(getpieceteam)
				beq a0, s6, diagEND1
				mv a0, t5
				mjal(getpiecepos)
				# if it isnt the same team
				beqz a0, diagEND1
				li a1, 7
				beq a0, a1, diagEND1
				add a0, s1, s4
				add a0, a0, s4 # double diag 
				add a1, s2, s5
				add a1, a1, s5
				slli a1, a1, 3
				add a0, a0, a1
				mv s3, a0
				mjal(getpiecefromplace)
				li t0, 0xFF
				bne a1, t0, diagEND1
				la t0, moves
				li t1, 1
				sw t1, 0(t0)
				sw s3, 4(t0)
				la t0, willAPieceDie
				li t1, 1
				sb t1, 0(t0) # yes it will
				la t0, pieceToDie
				sb t5, 0(t0) # store the piece for later death
				li a0, 1
				j diagEND

				diagEND1:
				li a0, 0
				diagEND:
				lw s0, 0(sp)
						lw s1, 4(sp)
						lw s2, 8(sp)
						lw s3, 12(sp)
						lw s4, 16(sp)
						lw s5, 20(sp)
						lw s6, 24(sp)
						lw s7, 28(sp)
						lw s8, 32(sp)
						lw s9, 36(sp)
						lw s10, 40(sp)
						lw s11, 44(sp)
						lw t0, 48(sp)
						lw t1, 52(sp)
						lw t2, 56(sp)
						lw t3, 60(sp)
						lw t4, 64(sp)
						lw t5, 68(sp)
						lw t6, 72(sp)
						lw ra, 76(sp)
						addi sp, sp, 80
				jalr zero, ra, 0

		# input a1 = piece or place
		# output a0 = index of selected board space
		selectBoard:
			#############
				addi sp, sp, -96
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw s2, 8(sp)
					sw s3, 12(sp)
					sw s4, 16(sp)
					sw s5, 20(sp)
					sw s6, 24(sp)
					sw s7, 28(sp)
					sw s8, 32(sp)
					sw s9, 36(sp)
					sw s10, 40(sp)
					sw s11, 44(sp)
					sw t0, 48(sp)
					sw t1, 52(sp)
					sw t2, 56(sp)
					sw t3, 60(sp)
					sw t4, 64(sp)
					sw t5, 68(sp)
				 	sw t6, 72(sp)
					sw ra, 76(sp)
					#sw a0, 80(sp)
					sw a1, 84(sp)
					sw a2, 88(sp)
					sw a3, 92(sp)
				#############
			la t6, boardSelectionPos
			lw t6, 0(t6)
			mv s3, a1
			mv a0, s3
			mv a1, t6
			jal drawselectedpos
			j selectstart
			selectloop:
			#DESENHA
				selectDRAW:
				#undraw
				mv a0, s2
				mjal(undrawtile)
				addi a0, a0, -16
				mjal(undrawtile)
				#get pos
				selectstart:
				la a1, boarddrawaddresses
				slli t5, t6, 2
				add a1, a1, t5
				lw a1, 0(a1)
				li s2, 646
				sub a1, a1, s2
				#draw the border
				lw a0, selectborderaddress
				mjal(drawtile)
				addi a0, a0, 256
				addi a1, a1, 16
				mjal(drawtile)
				mv s2, a1
			#CHECK KEYBOARD
				selectkeyboard:
				li t1,0xFF200000
				lw t0,0(t1)
				andi t0,t0,0x0001		# Le bit de Controle Teclado
					beq t0,zero,selectkeyboard   	   	# Se nÔøΩo hÔøΩ tecla pressionada PULA
					lw t2,4(t1)
					li t0, 97
					beq t2, t0, MOVE_LEFT
					li t0, 100
					beq t2, t0, MOVE_RIGHT
					li t0, 119
					beq t2, t0, MOVE_UP
					li t0, 115
					beq t2, t0, MOVE_DOWN
					li t0, 101
					beq t2, t0, BUTTON_PRESS
					li t0, 102 # DEBUG
					beq t2, t0, DEBUG
					j selectkeyboard
					MOVE_LEFT:
						li s0, 8
						rem s0, t6, s0
						beqz s0, selectkeyboard
						addi t6,t6, -1
						li a0, 0
						li a1, 1
						jal SEbox
						mv a0, s3
						mv a1, t6
						jal drawselectedpos
						j selectDRAW
					MOVE_RIGHT:
						li s0, 8
						rem s0, t6, s0
						li s1, 7
						beq s0, s1, selectkeyboard
						addi t6, t6, 1
						li a0, 0
						li a1, 1
						jal SEbox
						mv a0, s3
						mv a1, t6
						jal drawselectedpos
						j selectDRAW
					MOVE_UP:
						li s0, 7
						ble t6, s0, selectkeyboard
						addi t6,t6, -8
						li a0, 0
						li a1, 1
						jal SEbox
						mv a0, s3
						mv a1, t6
						jal drawselectedpos
						j selectDRAW
					MOVE_DOWN:
						li s0, 56
						bge t6, s0, selectkeyboard
						addi t6, t6, 8
						li a0, 0
						li a1, 1
						jal SEbox
						mv a0, s3
						mv a1, t6
						jal drawselectedpos
						j selectDRAW
					BUTTON_PRESS:
						#undraw
						mv a0, s2
						mjal(undrawtile)
						addi a0, a0, -16
						mjal(undrawtile)
						j outselect
					DEBUG:
						la s9, moves
						lw s10, 4(s9)
						lw s11, 8(s9)
						lw s9, 0(s9)
						j selectkeyboard

				
				
			outselect:
				##############
					mv a0, t6
					la t6, boardSelectionPos
					sw a0, 0(t6)
					lw s0, 0(sp)
						lw s1, 4(sp)
						lw s2, 8(sp)
						lw s3, 12(sp)
						lw s4, 16(sp)
						lw s5, 20(sp)
						lw s6, 24(sp)
						lw s7, 28(sp)
						lw s8, 32(sp)
						lw s9, 36(sp)
						lw s10, 40(sp)
						lw s11, 44(sp)
						lw t0, 48(sp)
						lw t1, 52(sp)
						lw t2, 56(sp)
						lw t3, 60(sp)
						lw t4, 64(sp)
						lw t5, 68(sp)
						lw t6, 72(sp)
						lw ra, 76(sp)
						#lw a0, 80(sp)
						lw a1, 84(sp)
						lw a2, 88(sp)
						lw a3, 92(sp)
						addi sp, sp 96
					##############
					jalr zero, ra, 0
			
			# input: a0 = piece or place
			# a1 = board place index
			drawselectedpos:
				addi sp, sp, -80
				sw s1, 4(sp)
						sw s2, 8(sp)
						sw s3, 12(sp)
						sw s4, 16(sp)
						sw s5, 20(sp)
						sw s6, 24(sp)
						sw s7, 28(sp)
						sw s8, 32(sp)
						sw s9, 36(sp)
						sw s10, 40(sp)
						sw s11, 44(sp)
						sw t0, 48(sp)
						sw t1, 52(sp)
						sw t2, 56(sp)
						sw t3, 60(sp)
						sw t4, 64(sp)
						sw t5, 68(sp)
						sw t6, 72(sp)
						sw ra, 76(sp)
				
				
				
				li t0, 65 # letters offset
				li t1, 56 # numbers offset
				mv s0, a1
				bnez a0, placepos
				piecepos:
					li a0, 0xff000000
					mjal(undrawtile)
					li a0, 0xff000010
					mjal(undrawtile)
					li a0, 0xff000020
					mjal(undrawtile)
					li a0, 0xff000030
					mjal(undrawtile)
					li a0, 0xff000040
					mjal(undrawtile)
					li t2, 8
					div t2, s0, t2
					sub a0, t1, t2
					li a1, 0xff000010
					mjal(drawChar)
					li t2, 8
					rem t2, s0, t2
					add a0, t2, t0
					li a1, 0xff000000
					mjal(drawChar)
					j drawselectedposEND
				placepos:
					li a0, 0xff000020
					mjal(undrawtile)
					li a0, 0xff000030
					mjal(undrawtile)
					li a0, 0xff000040
					mjal(undrawtile)
					li a0, 26 #arrow
					li a1, 0xff000020
					mjal(drawChar)
					li t2, 8
					div t2, s0, t2
					sub a0, t1, t2
					li a1, 0xff000040
					mjal(drawChar)
					li t2, 8
					rem t2, s0, t2
					add a0, t2, t0
					li a1, 0xff000030
					mjal(drawChar)
				drawselectedposEND:
					lw s1, 4(sp)
						lw s2, 8(sp)
						lw s3, 12(sp)
						lw s4, 16(sp)
						lw s5, 20(sp)
						lw s6, 24(sp)
						lw s7, 28(sp)
						lw s8, 32(sp)
						lw s9, 36(sp)
						lw s10, 40(sp)
						lw s11, 44(sp)
						lw t0, 48(sp)
						lw t1, 52(sp)
						lw t2, 56(sp)
						lw t3, 60(sp)
						lw t4, 64(sp)
						lw t5, 68(sp)
						lw t6, 72(sp)
						lw ra, 76(sp)
					addi sp, sp, 80
					jalr zero, ra 0
		SEbox:
			addi sp, sp, -24
			sw s0, 0(sp)
			sw s1, 4(sp)
			sw s2, 8(sp)
			sw s3, 12(sp)
			sw s4, 16(sp)
			sw t0, 20(sp)
			
			mv s0, a1
			slli a0, a0, 2
			la t0, soundEffects
			add t0, t0, a0
			SEbox_cond:
			beqz s0, SEboxEND
			lb s1, 3(t0) # sync or not
			lb s2, 2(t0) # pitch
			lb s3, 1(t0) # duration
			li s4, 100
			mul s3, s3, s4
			lb s4, 0(t0) # instrument
			mv a0, s2
			mv a1, s3
			mv a2, s4
			li a3, 100
			mv a7, s1
			ecall
			addi t0, t0, 4
			addi s0, s0, -1
			j SEbox_cond
			SEboxEND:
			
			lw s0, 0(sp)
			lw s1, 4(sp)
			lw s2, 8(sp)
			lw s3, 12(sp)
			lw s4, 16(sp)
			lw t0, 20(sp)
			addi sp, sp, 24
			jalr zero, ra, 0

		# checks if theres a valid piece and returns it
		# a0 = board index
		# a1 = 0/1 player/cpu 
		checkPieceValid:
			addi sp, sp, -16
			sw s0, 0(sp)
			sw s1, 4(sp)
			sw t0, 8(sp)
			sw ra, 12(sp)

			mv s0, a0
			mv s1, a1
			jal getpiecefromplace
			li t0, 0xff # if there isnt one
			mv s0, a0
			beq a1, t0, notyourteam
			jal getpieceteam
			bne a0, s1 notyourteam
			mv a0, s0
			mjal(generateMoves)
			la t0, moves
			lb t0, 0(t0)
			beqz t0, notyourteam
			mv a0, s0
			li a1, 0x00
			j checkPieceValidEND
			notyourteam:
			li a0, 4
			li a1, 1
			mjal(SEbox)
			li a0, 0xff
			li a1, 0xff
			checkPieceValidEND:
			lw s0, 0(sp)
			lw s1, 4(sp)
			lw t0, 8(sp)
			lw ra, 12(sp)
			addi sp, sp, 16

			jalr zero, ra, 0

		checkMoveValid:
			addi sp, sp, -24
			sw s0, 0(sp)
			sw s1, 4(sp)
			sw t0, 8(sp)
			sw t1, 12(sp)
			sw t2, 16(sp)
			sw ra, 20(sp)

			mv s0, a0
			mv s1, a1
			lw t1, 0(s1) #size
			slli t1, t1, 2
			li t0, 0
			addi s1, s1, 4
			checkMoveValidloop:
			beq t0, t1, checkMoveValidloopend
			add t2, s1, t0
			lw t2, 0(t2)
			li a0, 1
			beq s0, t2, checkMoveValidEND 
			addi t0, t0, 4
			j checkMoveValidloop
			checkMoveValidloopend:
			li a0, 4
			li a1, 1
			mjal(SEbox)
			li a0, 0
			checkMoveValidEND:
			lw s0, 0(sp)
			lw s1, 4(sp)
			lw t0, 8(sp)
			lw t1, 12(sp)
			lw t2, 16(sp)
			lw ra, 20(sp)
			addi sp, sp, 24
			jalr zero, ra, 0

		# output: a0 = 0/1  no win / win
		# 		  a1 = 0/1  player/cpu 
		checkVictory:
			addi sp, sp, 12
			sw t0, 0(sp)
			sw t1, 4(sp)
			sw t2, 8(sp)

			la t0, piecesStatus
			li t1, 0
			lw t2, 0(t0)
			add t1, t1, t2
			lw t2, 4(t0)
			add t1, t1, t2
			lw t2, 8(t0)
			add t1, t1, t2
			beqz t1, checkVictoryCPU
			li t1, 0
			lw t2, 12(t0)
			add t1, t1, t2
			lw t2, 16(t0)
			add t1, t1, t2
			lw t2, 20(t0)
			add t1, t1, t2
			beqz t1, checkVictoryPlayer
			li a0, 0
			j checkVictoryEND
			checkVictoryCPU:
			li a0, 1
			li a1, 1
			j checkVictoryEND
			checkVictoryPlayer:
			li a0, 1
			li a1, 0
			checkVictoryEND:
			lw t0, 0(sp)
			lw t1, 4(sp)
			lw t2, 8(sp)
			addi sp, sp, 12
			jalr zero, ra, 0


		#######################
	drawp1:
		addi sp, sp, -4
		sw ra, 0(sp)
		#>#
		li a0, 0xff000110
		mjal(undrawtile)
		mv a1, a0
		li a0, 16
		mjal(drawChar)
		#P# 
		addi a1, a1, 16
		mv a0, a1
		mjal(undrawtile)
		li a0, 80
		mjal(drawChar)
		#1#
		addi a1, a1, 16
		mv a0, a1
		mjal(undrawtile)
		li a0, 49
		mjal(drawChar)
		# #
		li a0, 0xff001510
		mjal(undrawtile)
		mv a1, a0
		li a0, 32
		mjal(drawChar)
		addi a1, a1, 16
		li a0, 80
		mjal(drawChar)
		addi a1, a1, 16
		li a0, 50
		mjal(drawChar)
		lw ra, 0(sp)
		addi sp, sp, 4
		jalr zero, ra, 0
	drawp2:
		addi sp, sp, -4
		sw ra, 0(sp)
		li a0, 0xff000110
		mjal(undrawtile)
		mv a1, a0
		li a0, 32
		mjal(drawChar)
		addi a1, a1, 16
		li a0, 80
		mjal(drawChar)
		addi a1, a1, 16
		li a0, 49
		li a0, 0xff001510
		mjal(undrawtile)
		mv a1, a0
		li a0, 16
		mjal(drawChar)
		addi a1, a1, 16
		li a0, 80
		mjal(drawChar)
		addi a1, a1, 16
		li a0, 50
		mjal(drawChar)

		lw ra, 0(sp)
		addi sp, sp, 4
		jalr zero, ra, 0

	drawAllPieces:
		addi sp, sp, -4
		sw ra, 0(sp)
		li t1, 1
		li t0, 25
		looppiece:
		beq t1, t0, looppieceend
		mv a0, t1
		jal getpiece
		jal drawpiece
		addi t1,t1, 1
		j looppiece
		looppieceend:
		lw ra, 0(sp)
		addi sp, sp, 4
		jalr zero, ra, 0

	jooj:
		li a0, 20 # piece?
		li a1, 7 
		li a2, 3
		movepiece:
			addi sp, sp, -96
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw s2, 8(sp)
					sw s3, 12(sp)
					sw s4, 16(sp)
					sw s5, 20(sp)
					sw s6, 24(sp)
					sw s7, 28(sp)
					sw s8, 32(sp)
					sw s9, 36(sp)
					sw s10, 40(sp)
					sw s11, 44(sp)
					sw t0, 48(sp)
					sw t1, 52(sp)
					sw t2, 56(sp)
					sw t3, 60(sp)
					sw t4, 64(sp)
					sw t5, 68(sp)
				 	sw t6, 72(sp)
					sw ra, 76(sp)
					#sw a0, 80(sp)
					sw a1, 84(sp)
					sw a2, 88(sp)
					sw a3, 92(sp)
			# get piece draw address to move cursor to
			mv s0, a0 # piece 
			mv s1, a1 # place destiny
			jal getpiecedrawaddress
			mv s3, a0
			
			# get piece side to decide which cursor to move 
			mv a0, s0
			jal getpieceteam
			mv s11, a0
			bnez a0, movepiece_cpu
			movepiece_player:
			la a2, playerCursorPosition
			mv s4, a2 # save for later 
			la a3, playerCursorAddress
			mv s5, a3 # save for later
			mv a0, s0
			mjal(getpieceisdame)
			beqz a0, movepiece_playernotdame
			la s6, playerdameaddress
			j movepiece_playerdame
			movepiece_playernotdame:
			la s6, playerpieceaddress
			movepiece_playerdame:
			lw s7, playerCursorDefaultPos
			j movepiece_movecursor
			movepiece_cpu: 
			la a2, CPUCursorPosition
			mv s4, a2 
			la a3, CPUCursorAddress
			mv s5, a3 
			mv a0, s0
			mjal(getpieceisdame)
			beqz a0, movepiece_cpunotdame
			la s6, cpudameaddress
			j movepiece_cpudame
			movepiece_cpunotdame:
			la s6, cpupieceaddress
			movepiece_cpudame:
			la s6, cpupieceaddress
			lw s7, CPUCursorDefaultPos

			# move cursor to piece address 
			movepiece_movecursor:
			mv a0, s3
			mjal(getcoordinates) # of the piece
			jal MOVE_OBJECT
			
			# now that the cursor is over the piece, undraw the piece
			mv a0, s3
			mjal(removefromBG1) # and remove from background
			mv a0, s3
			mjal(undrawtile)
			
			# move both the cursor and piece 
			mv a0, s1 # destiny
			jal getboardfromindex # a0 = board draw address 
			mjal(getcoordinates) # transform into x y 
			mv a2, s4 # cursor position 
			mv a3, s5 # cursor address 
			mv a4, s6 # piece address 
			jal MOVE_2OBJECTS

			# update the piece position 
			mv a0, s0
			mv a1, s1
			jal updatepiecepos
			mv s0, a0

			li t0, 0x38
			and t0, s0, t0
			srli t0, t0, 3
			beqz t0, dameifp1
			li t1, 7
			beq t0, t1, dameifp2
			j notadame
			dameifp1:
			bnez s11 notadame
			mv a0, s0
			mjal(upgradetodame)
			mv s0, a0
			li a0, 5
			li a1, 3
			mjal(SEbox)
			j notadame

			dameifp2:
			beqz s11 notadame
			mv a0, s0
			mjal(upgradetodame)
			mv s0, a0
			li a0, 5
			li a1, 3
			mjal(SEbox)


			notadame:
			mv a0, s0
			mv a1, s1
			jal drawpiece

			tormentfulDeath:
			la t0, willAPieceDie
			lb t1, 0(t0)
			beqz t1 tormentfulDeathEND
			li a0, 5
			li a1, 3
			mjal(SEbox)
			li t1, 0x00
			sb t1, 0(t0)
			la t0, pieceToDie
			lb s0, 0(t0)
			mv a0, s0
			mjal(getpiecedrawaddress)
			mv t1, a0 
			mjal(removefromBG1)
			mv a0, s0
			mjal(getpieceindex)
			mjal(setpiecestatus)

			mv a0, t1
			mjal(getcoordinates)
			addi a0, a0, -2
			addi a1, a1, -2
			mv a2, s4
			mv a3, s5
			mjal(MOVE_OBJECT)
			mv a0, t1
			mjal(getcoordinates)
			addi a0, a0, 4
			addi a1, a1, 4
			mv a2, s4
			mv a3, s5
			mjal(MOVE_OBJECT)
			mv a0, t1
			mjal(getcoordinates)
			addi a0, a0, -2
			addi a1, a1, 4
			mv a2, s4
			mv a3, s5
			mjal(MOVE_OBJECT)
			mv a0, t1
			mjal(getcoordinates)
			addi a0, a0, 4
			addi a1, a1, -2
			mv a2, s4
			mv a3, s5
			mjal(MOVE_OBJECT)
			tormentfulDeathEND:

			# move the cursor to the resting position
			mv a0, s7 # cursor default position 
			mjal(getcoordinates)
			mv a2, s4
			mv a3, s5
			jal MOVE_OBJECT

			lw s0, 0(sp)
						lw s1, 4(sp)
						lw s2, 8(sp)
						lw s3, 12(sp)
						lw s4, 16(sp)
						lw s5, 20(sp)
						lw s6, 24(sp)
						lw s7, 28(sp)
						lw s8, 32(sp)
						lw s9, 36(sp)
						lw s10, 40(sp)
						lw s11, 44(sp)
						lw t0, 48(sp)
						lw t1, 52(sp)
						lw t2, 56(sp)
						lw t3, 60(sp)
						lw t4, 64(sp)
						lw t5, 68(sp)
						lw t6, 72(sp)
						lw ra, 76(sp)
						#lw a0, 80(sp)
						lw a1, 84(sp)
						lw a2, 88(sp)
						lw a3, 92(sp)
						addi sp, sp 96
			jalr zero, ra, 0
			
			
	#	
		# PIECES LOGIC

			# what it does: gets a piece byte from an index
			# inputs: a0 = index of the piece
			# outputs: a0 = byte representing the piece
			getpiece:
				addi sp, sp, -4
				sw a1, 0(sp) # back up a1
				
				addi a0, a0, -1 #pieces start at 1
				la a1, pieces 
				add a0, a1, a0 # add number
				lb a0, 0(a0) # get piece
				li a1, 0x000000FF
				and a0, a1, a0

				lw a1, 0(sp)
				addi sp, sp, 4
				jalr zero, ra, 0 # return

			getpiecestatus:
				addi sp, sp, -4
				sw a1, 0(sp) # back up a1
				
				addi a0, a0, -1 #pieces start at 1
				la a1, piecesStatus 
				add a0, a1, a0 # add number
				lb a0, 0(a0) # get piece
				li a1, 0x000000FF
				and a0, a1, a0

				lw a1, 0(sp)
				addi sp, sp, 4
				jalr zero, ra, 0 # return

			setpiecestatus:
				addi sp, sp, -4
				sw a1, 0(sp) # back up a1
				
				addi a0, a0, -1 #pieces start at 1
				la a1, piecesStatus 
				add a0, a1, a0 # add number
				li a1, 0x00
				sb a1, 0(a0) # get piece

				lw a1, 0(sp)
				addi sp, sp, 4
				jalr zero, ra, 0 # return

			getpieceindex:
				addi sp, sp, -16
				sw t0, 0(sp)
				sw t1, 4(sp)
				sw t2, 8(sp)
				sw t3, 12(sp)

				andi a0, a0, 0x00FF
				li t0, 0
				li t1, 25
				la t2, pieces 
				getpieceloop:
				add t3, t0, t2
				lb t3, 0(t3)
				andi t3, t3, 0x00FF
				beq t3, a0, foundpieceindex
				addi t0, t0, 1
				j getpieceloop
				foundpieceindex:
				addi t0, t0, 1
				mv a0, t0
				lw t0, 0(sp)
				lw t1, 4(sp)
				lw t2, 8(sp)
				lw t3, 12(sp)
				addi sp, sp, 16
				jalr zero, ra, 0

			# what it does: gets a piece x and y position
			# inputs: a0 = byte represeting the piece
			# outputs: a0 = x  / a1 = y
			getpiecepos:
				li a1, 0x00000038
				and a1, a0, a1
				srli a1, a1, 3
				andi a0, a0, 7
				jalr zero, ra, 0

			# what it does: same shit as getboarddrawaddress
			# inputs:
			# outputs: 
			getpiecedrawaddress:
				addi sp, sp, -4
				sw ra, 0(sp)

				#li a1, 0x00000038
				#and a1, a0, a1
				#srli a1, a1, 3
				#andi a0, a0, 7
				jal getboarddrawaddress

				lw ra, 0(sp)
				addi sp, sp, 4
				jalr zero, ra, 0

			# what it does: returns 0/1 if a piece is as dame
			# inputs: a0 = the piece
			# outputs: a0 = is dame 
			getpieceisdame:
				andi a0, a0, 0x40
				srli a0, a0, 6
				jalr zero, ra, 0

			# what it does:
			# inputs:
			# outputs: 
			getpieceteam:
				andi a0, a0, 0x80
				srli a0, a0, 7
				jalr zero, ra, 0

			# what it does:
			# inputs:
			# outputs: 
			drawpiece:
				addi sp, sp, -16
				sw s0, 0(sp)
				sw a0, 4(sp)
				sw a1, 8(sp)
				sw ra, 12(sp)

				mv s0, a0
				jal getboarddrawaddress
				mv s1, a0
				mv a0, s0
				jal getpieceisdame
				bnez a0, drawdame
				drawnotdame:
					mv a0, s0
					jal getpieceteam
					bnez a0, drawcpunotdame
					drawplayernotdame:
						lw a0, playerpieceaddress
						mv a1, s1
						mjal(drawtile)
						mv a0, a1
						jal movetoBG
						j enddrawpiece
					drawcpunotdame:
						lw a0, cpupieceaddress
						mv a1, s1
						mjal(drawtile)
						mv a0, a1
						jal movetoBG
						j enddrawpiece
				drawdame:
					mv a0, s0
					jal getpieceteam
					bnez a0, drawcpudame
					drawplayerdame:
						lw a0, playerdameaddress
						mv a1, s1
						mjal(drawtile)
						mv a0, a1
						jal movetoBG
						j enddrawpiece
					drawcpudame:
						lw a0, cpudameaddress
						mv a1, s1
						mjal(drawtile)
						mv a0, a1
						jal movetoBG
						j enddrawpiece
				enddrawpiece:

				lw s0, 0(sp)
				lw a0, 4(sp)
				lw a1, 8(sp)
				lw ra, 12(sp)
				addi sp, sp, 16
				jalr zero, ra, 0

			# what it does: gets a piece position to calculate the draw address
			# inputs: a0 = the piece byte
			# outputs: a1 = draw address of the piece
			getboarddrawaddress:
				addi sp, sp, -4
				sw ra, 0(sp)

				jal getpiecepos
				slli a1, a1, 3
				add a0, a1, a0
				la a1, boarddrawaddresses
				slli a0, a0, 2
				add a1, a0, a1
				lw a0, 0(a1)
				
				lw ra, 0(sp)
				addi sp, sp, 4
				jalr zero, ra, 0

			# what it does: given a board index, return piece from that place, 0xFF if there is none
			# inputs: a0 = board index
			# outputs: a0 = the piece, a1=0xff if there isnt one
			getpiecefromplace:
				addi sp, sp, -28
				sw s0, 0(sp)
				sw t0, 4(sp)
				sw t1, 8(sp)
				sw t2, 12(sp)
				#sw a1, 16(sp)
				sw s1, 20(sp)
				sw ra, 24(sp)

				mv s0, a0 
				li t0, 1
				li t1, 25
				getpiecefromplaceloop:
				beq t0, t1, notfoundpiece
				add a0, zero, t0
				jal getpiece
				mv s1, a0
				mv a0, t0
				addi t0, t0, 1
				jal getpiecestatus
				beqz a0, getpiecefromplaceloop
				mv a0, s1
				jal getpiecepos
				slli a1, a1, 3
				add a0, a1, a0
				beq s0, a0, foundpiece
				j getpiecefromplaceloop
				foundpiece:
				add a0, s1, zero
				li a1, 0
				j getpiecefromplaceEND
				notfoundpiece:
				li a1, 0xFF
				getpiecefromplaceEND:
				lw s0, 0(sp)
				lw t0, 4(sp)
				lw t1, 8(sp)
				lw t2, 12(sp)
				#lw a1, 16(sp)
				lw s1, 20(sp)
				lw ra, 24(sp)
				addi sp, sp, 28
				jalr zero, ra, 0


			# what it does: gets a draw address from x and y 
			# inputs: a0 = x  / a1 = y
			# outputs: a0 = address 
			getboardfromxy:
				slli a1, a1, 3
				add a0, a1, a0
				la a1, boarddrawaddresses
				slli a0, a0, 2
				add a1, a0, a1
				lw a0, 0(a1)
				jalr zero, ra, 0

			# what it does: gets a draw address from board index
			# inputs: a0 = index
			# outputs: a0 = address
			getboardfromindex:
				la a1, boarddrawaddresses
				slli a0, a0, 2
				add a1, a0, a1
				lw a0, 0(a1)
				jalr zero, ra, 0

			upgradetodame:
				addi sp, sp, -24
				sw t0, 0(sp)
				sw t1, 4(sp)
				sw t2, 8(sp)
				sw t3, 12(sp)
				sw s0, 16(sp)
				sw ra, 20(sp)

				ori s0, a0, 0x40
				li t0, 0
				la t1, pieces 
				upgratepieceposloop:
				add t2, t1, t0
				lb t3, 0(t2)
				andi t3, t3, 0x00FF
				addi t0, t0, 1
				bne t3, a0, upgratepieceposloop
				sb s0, 0(t2)
				mv a0, s0

				lw t0, 0(sp)
				lw t1, 4(sp)
				lw t2, 8(sp)
				lw t3, 12(sp)
				lw s0, 16(sp)
				lw ra, 20(sp)
				addi sp, sp, 24
				jalr zero, ra, 0


			# what it does: given piece and new board index, update it 
			# inputs: a0 = piece / a1 = new board index
			# output: a0 = new piece 
			updatepiecepos:
				addi sp, sp, -20
				sw t0, 0(sp)
				sw t1, 4(sp)
				sw t2, 8(sp)
				sw t3, 12(sp)
				sw s0, 16(sp)

				li t0, 8
				rem t0, a1, t0 # x
				li t1, 8
				div t1, a1, t1 # y
				slli t1, t1, 3
				or t0, t0, t1
				li t1, 0xC0
				and t1, a0, t1
				or s0, t0, t1 # new piece
				li t0, 0
				la t1, pieces 
				updatepieceposloop:
				add t2, t1, t0
				lb t3, 0(t2)
				andi t3, t3, 0x00FF
				addi t0, t0, 1
				bne t3, a0, updatepieceposloop
				sb s0, 0(t2)
				mv a0, s0

				lw t0, 0(sp)
				lw t1, 4(sp)
				lw t2, 8(sp)
				lw t3, 12(sp)
				lw s0, 16(sp)
				addi sp, sp, 20
				jalr zero, ra, 0


		###################################################
			
			MOVE_OBJECT:
				#############
				addi sp, sp, -96
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw s2, 8(sp)
					sw s3, 12(sp)
					sw s4, 16(sp)
					sw s5, 20(sp)
					sw s6, 24(sp)
					sw s7, 28(sp)
					sw s8, 32(sp)
					sw s9, 36(sp)
					sw s10, 40(sp)
					sw s11, 44(sp)
					sw t0, 48(sp)
					sw t1, 52(sp)
					sw t2, 56(sp)
					sw t3, 60(sp)
					sw t4, 64(sp)
					sw t5, 68(sp)
				 	sw t6, 72(sp)
					sw ra, 76(sp)
					sw a0, 80(sp)
					sw a1, 84(sp)
					sw a2, 88(sp)
					sw a3, 92(sp)
				#############
				mv s0, a0 # x
				mv s1, a1 # y
				mv s3, a2 # address of position
				mv s4, a3 # address of graphical data
				mjal(getaddress)
				mv s2, a0 # destination address
				
				move_loop:
				lw t1, 0(s3)
				mv t6, t1 # backup of original position
				beq t1, s2, endmove_loop
					mv a0, t1
					mjal(getcoordinates)
					bgt a0,s0, greater_x
					blt a0,s0, lesser_x
					j move_y
					greater_x:
						addi a0, a0, -1
						j move_y
					lesser_x:
						addi a0, a0, 1
					move_y:
						bgt a1, s1, greater_y
						blt a1, s1, lesser_y
						j store_move_address
					greater_y:
						addi a1, a1, -1
						j store_move_address
					lesser_y:
						addi a1, a1, 1
					store_move_address:
						mjal(getaddress)
						sw a0, 0(s3) #store new position
						#DRAW SHIT
						mv a0, t6 # recover original position
						mjal(undrawtile)
						lw a1, 0(s3) # position to draw
						lw a0, 0(s4) # address of graphics
						mjal(drawtile)
						li a0, FRAMEWAIT
						li a7, 32 # sleep
						ecall
					j move_loop
				endmove_loop:
				##############
				lw s0, 0(sp)
					lw s1, 4(sp)
					lw s2, 8(sp)
					lw s3, 12(sp)
					lw s4, 16(sp)
					lw s5, 20(sp)
					lw s6, 24(sp)
					lw s7, 28(sp)
					lw s8, 32(sp)
					lw s9, 36(sp)
					lw s10, 40(sp)
					lw s11, 44(sp)
					lw t0, 48(sp)
					lw t1, 52(sp)
					lw t2, 56(sp)
					lw t3, 60(sp)
					lw t4, 64(sp)
					lw t5, 68(sp)
					lw t6, 72(sp)
					lw ra, 76(sp)
					lw a0, 80(sp)
					lw a1, 84(sp)
					lw a2, 88(sp)
					lw a3, 92(sp)
					addi sp, sp 96
				##############
				jalr zero, ra, 0

			MOVE_2OBJECTS:
				#############
				addi sp, sp, -80
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw s2, 8(sp)
					sw s3, 12(sp)
					sw s4, 16(sp)
					sw s5, 20(sp)
					sw s6, 24(sp)
					sw s7, 28(sp)
					sw s8, 32(sp)
					sw s9, 36(sp)
					sw s10, 40(sp)
					sw s11, 44(sp)
					sw t0, 48(sp)
					sw t1, 52(sp)
					sw t2, 56(sp)
					sw t3, 60(sp)
					sw t4, 64(sp)
					sw t5, 68(sp)
				 	sw t6, 72(sp)
					sw ra, 76(sp)
				#############
				mv s0, a0 # x destination
				mv s1, a1 # y destination
				mv s3, a2 # address of position (cursor)
				mv s4, a3 # address of graphical data (cursor)
				mv s5, a4 # address of second object graphical data (piece)
				mjal(getaddress)
				mv s2, a0 # destination address (cursor)
				
				move_loop2:
				lw t1, 0(s3)
				mv t6, t1 # backup of original position
				
				beq t1, s2, endmove_loop2
					mv a0, t1
					mjal(getcoordinates)
					bgt a0,s0, greater_x2
					blt a0,s0, lesser_x2
					j move_y2
					greater_x2:
						addi a0, a0, -1
						j move_y2
					lesser_x2:
						addi a0, a0, 1
					move_y2:
						bgt a1, s1, greater_y2
						blt a1, s1, lesser_y2
						j store_move_address2
					greater_y2:
						addi a1, a1, -1
						j store_move_address2
					lesser_y2:
						addi a1, a1, 1
					store_move_address2:
						mjal(getaddress)
						sw a0, 0(s3) #store new position (cursor)

						#DRAW SHIT
						mv a0, t6 # recover original position
						mjal(undrawtile)
						
						lw a1, 0(s3) # position to draw piece
						lw a0, 0(s5) # address of graphics piece
						mjal(drawtile)
						
						
						lw a1, 0(s3) # position to draw cursor
						lw a0, 0(s4) # address of graphics cursor
						mjal(drawtile)
						
						
						li a0, FRAMEWAIT
						li a7, 32 # sleep
						ecall
					j move_loop2
				endmove_loop2:
				##############
				lw s0, 0(sp)
					lw s1, 4(sp)
					lw s2, 8(sp)
					lw s3, 12(sp)
					lw s4, 16(sp)
					lw s5, 20(sp)
					lw s6, 24(sp)
					lw s7, 28(sp)
					lw s8, 32(sp)
					lw s9, 36(sp)
					lw s10, 40(sp)
					lw s11, 44(sp)
					lw t0, 48(sp)
					lw t1, 52(sp)
					lw t2, 56(sp)
					lw t3, 60(sp)
					lw t4, 64(sp)
					lw t5, 68(sp)
					lw t6, 72(sp)
					lw ra, 76(sp)
					addi sp, sp 80
				##############
				jalr zero, ra, 0


			


		#
			#############################################################################
			# uncompress()
			#
			# description:
			# This function uncompresses tiles to a specific location
			# in memory. The tiles are decompressed in color bytes, based
			# on the palette defined at the sprite_palette
			#
			# inputs:
			# a0 - address of compressed sprite
			# a1 - sprite palette, four colours
			#
			# outputs:
			# a0 - address where the sprite was decompressed
			##############################################################################
			uncompress:
				addi sp, sp, -80
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw s2, 8(sp)
					sw s3, 12(sp)
					sw s4, 16(sp)
					sw s5, 20(sp)
					sw s6, 24(sp)
					sw s7, 28(sp)
					sw s8, 32(sp)
					sw s9, 36(sp)
					sw s10, 40(sp)
					sw s11, 44(sp)
					sw t0, 48(sp)
					sw t1, 52(sp)
					sw t2, 56(sp)
					sw t3, 60(sp)
					sw t4, 64(sp)
					sw t5, 68(sp)
				 	sw t6, 72(sp)
					sw ra, 76(sp)



				mv s0, a0 # save sprite address
				mv s1, a1 # save sprite palette mask
				
				 
				 lw s2, VRAMPOINTER
				 mv s11, s2 # the original VRAMPOINTER, will be the a0 output at the end 

				 #load colors on s7-s10
				 lw t2, COLOR_PALETTE #load color palette
				 and t2, t2, s1 	# apply sprite-specific mask
				 li t1, 0xC7C7C7C7 # load transparency
				 not t0, s1		#negate spprite mask
				 and t1, t1, t0 	# apply to transparency
				 or t2, t2, t1		# get result of palette + transparency 
				 srli s7, t2, 24	# color 00
				 srli s8, t2, 16	# color 01
				 srli s9, t2, 8		# color 10
				 add  s10, t2, zero # color 11, disregard the other bytes of the word

				 li t1, 0
				 li t0, 64 # number of bytes to read from sprite_address
				 # for t1 = 0; t1 != t0; t1++
				uncompress_for: beq t1, t0, uncompress_forend

					add t3, s0, t1 # store byte address to be read
					lb t3, 0(t3) # fetches the byte
					
					li t2, 0xC0 # first pixel mask
					and t6, t3, t2 # and with the byte
					srli t6, t6, 6 # move to less significant bits
					jal uncompress_switch
					addi s2, s2, 1

					li t2, 0x30 # second pixel
					and t6, t3, t2
					srli t6, t6, 4
					jal uncompress_switch
					addi s2, s2, 1

					li t2, 0x0C # third pixel
					and t6, t3, t2
					srli t6, t6, 2
					jal uncompress_switch
					addi s2, s2, 1

					li t2, 0x03 # fourth pixel
					and t6, t3, t2
					jal uncompress_switch
					addi s2, s2, 1



					addi t1, t1, 1 # increment iterator
					j uncompress_for


					uncompress_switch:
						# load masks in t2, compare to the byte read and go to according label
						li t2, 0 
						beq t6, t2, uncompress_switch00
						li t2, 1
						beq t6, t2, uncompress_switch01
						li t2, 2
						beq t6, t2, uncompress_switch10
						li t2, 3
						beq t6, t2, uncompress_switch11
						# in case there's another value (exception)
						li t0, 1 # sprite uncompress error
						la t1, ERROR_EXIT_CODE
						sb t0, 0(t1) 



					 	uncompress_switch00:
					 		sb s7, 0(s2) # store pixel at VRAMPOINTER
					 		j uncompress_switchend 
					 	uncompress_switch01:
					 		sb s8, 0(s2) # store pixel at VRAMPOINTER
					 		j uncompress_switchend 
					 	uncompress_switch10:
					 		sb s9, 0(s2) # store pixel at VRAMPOINTER
					 		j uncompress_switchend 
					 	uncompress_switch11:
					 		sb s10, 0(s2) # store pixel at VRAMPOINTER
					 		j uncompress_switchend 
				 	uncompress_switchend:	 		
				 		jalr zero, ra,0

				uncompress_forend:
					mv a0, s11 # return value
					la t0, VRAMPOINTER
					sw s2, 0(t0)

					lw s0, 0(sp)
						lw s1, 4(sp)
						lw s2, 8(sp)
						lw s3, 12(sp)
						lw s4, 16(sp)
						lw s5, 20(sp)
						lw s6, 24(sp)
						lw s7, 28(sp)
						lw s8, 32(sp)
						lw s9, 36(sp)
						lw s10, 40(sp)
						lw s11, 44(sp)
						lw t0, 48(sp)
						lw t1, 52(sp)
						lw t2, 56(sp)
						lw t3, 60(sp)
						lw t4, 64(sp)
						lw t5, 68(sp)
						lw t6, 72(sp)
						lw ra, 76(sp)
						addi sp, sp 80
					jalr zero,ra, 0

				 	
			#input: a0 (tile address) !!UNCOMPRESSED!!
			#	a1 (draw address)
			drawtile:

				addi sp, sp, -80
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw s2, 8(sp)
					sw s3, 12(sp)
					sw s4, 16(sp)
					sw s5, 20(sp)
					sw s6, 24(sp)
					sw s7, 28(sp)
					sw s8, 32(sp)
					sw s9, 36(sp)
					sw s10, 40(sp)
					sw s11, 44(sp)
					sw t0, 48(sp)
					sw t1, 52(sp)
					sw t2, 56(sp)
					sw t3, 60(sp)
					sw t4, 64(sp)
					sw t5, 68(sp)
				 	sw t6, 72(sp)
					sw ra, 76(sp)


				li t0, 0
				li t1, 16
				mv s0, a0
				mv s1, a1
				drawtile_loop1:
					beq t0, t1, drawtile_loop1_end
					lw t2, 0(s0)
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					lw t2, 4(s0)
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					addi s0, s0, 8
					addi s1, s1, 313
					addi t0, t0, 1
					j drawtile_loop1
					
					gettransparencylayer:
						li t5, 0x000000FF
						and t5, t5, t2
						li t6, 0xC7
						beq t5, t6, istransparent
						jalr zero, ra,0
						istransparent:
						li t5, 0x00012C00
						add t5, s1, t5
						lb t5, 0(t5)
						sb t5, 0(s1)
						jalr zero, ra, 4
						
				drawtile_loop1_end:
				addi s1, a1, 8
				addi s0, a0, 128
				li t0, 0
				li t1, 16
				drawtile_loop2:
					beq t0, t1, drawtile_loop2_end
					lw t2, 0(s0)
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					lw t2, 4(s0)
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					srli t2, t2, 8
					addi s1, s1, 1
					jal gettransparencylayer
					sb t2, 0(s1)
					addi s0, s0, 8
					addi s1, s1, 313
					addi t0, t0, 1
					j drawtile_loop2
				drawtile_loop2_end:

				lw s0, 0(sp)
					lw s1, 4(sp)
					lw s2, 8(sp)
					lw s3, 12(sp)
					lw s4, 16(sp)
					lw s5, 20(sp)
					lw s6, 24(sp)
					lw s7, 28(sp)
					lw s8, 32(sp)
					lw s9, 36(sp)
					lw s10, 40(sp)
					lw s11, 44(sp)
					lw t0, 48(sp)
					lw t1, 52(sp)
					lw t2, 56(sp)
					lw t3, 60(sp)
					lw t4, 64(sp)
					lw t5, 68(sp)
					lw t6, 72(sp)
					lw ra, 76(sp)
					addi sp, sp 80
				jalr zero, ra, 0
				
			# fuck this different encoding bullshit
			
			#input: a0: address of the tile
			#	a1: address to draw
			drawtileBG:
			addi sp, sp, -20 
			sw a0, 0(sp)
			sw a1, 4(sp)
			sw t0, 8(sp)
			sw t1, 12(sp)
			sw t2, 16(sp)
			
			li t0, 0
			li t1, 16  #tamanho do seu tile
			drawtileBGloop:
				beq t0, t1, drawtileBGloopEND
				lw t2, 0(a0)
				sw t2, 12(a1)
				lw t2, 4(a0)
				sw t2, 8(a1)
				lw t2, 8(a0)
				sw t2, 4(a1)
				lw t2, 12(a0)
				sw t2, 0(a1)
				addi a0, a0, 16
				addi a1, a1, 320
				addi t0, t0, 1
				j drawtileBGloop
			drawtileBGloopEND:
			lw a0, 0(sp)
			lw a1, 4(sp)
			lw t0, 8(sp)
			lw t1, 12(sp)
			lw t2, 16(sp)
			addi sp, sp, 20
			jalr zero, ra, 0

			# the worst name in recent history
			# input: a0 address
			undrawtile:
				addi sp, sp, -28
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw t0, 8(sp)
					sw t1, 12(sp)
					sw t2, 16(sp)
					sw t3, 20(sp)
					sw t4, 24(sp)
				
				mv s0, a0
				li s1, 0x00012C00 #ff3000000
				add s1, a0, s1
				li t0, 0
				li t1, 16
				undraw_loop1:
					beq t0, t1 undraw_loop1_end
					li t2, 0
					li t3, 16
					undraw_loop2:
						beq t2, t3, undraw_loop2_end
						lb t4, 0(s1)
						sb t4, 0(s0)
						addi s1, s1, 1
						addi s0, s0, 1
						addi t2, t2, 1
						j undraw_loop2
						undraw_loop2_end:
						addi t0, t0, 1
						addi s1, s1, 304
						addi s0, s0, 304
						j undraw_loop1 
				undraw_loop1_end:
				
				
				lw s0, 0(sp)
					lw s1, 4(sp)
					lw t0, 8(sp)
					lw t1, 12(sp)
					lw t2, 16(sp)
					lw t3, 20(sp)
					lw t4, 24(sp)
					addi sp, sp, 28
					
				jalr zero, ra, 0

			movetoBG:
				addi sp, sp, -36
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw t0, 8(sp)
					sw t1, 12(sp)
					sw t2, 16(sp)
					sw t3, 20(sp)
					sw t4, 24(sp)
					sw ra, 28(sp)
					sw t5, 32(sp)
				
				mv s0, a0
				li s1, 0x00012C00 #ff3000000
				add s1, a0, s1
				li t0, 0
				li t1, 16
				li t5, 0xffffffC7
				movetoBG_loop1:
					beq t0, t1 movetoBG_loop1_end
					li t2, 0
					li t3, 16
					movetoBG_loop2:
						beq t2, t3, movetoBG_loop2_end
						lb t4, 0(s0)
						beq t4, t5, movetoBG_skiptransparency
						sb t4, 0(s1)
						movetoBG_skiptransparency:
						addi s1, s1, 1
						addi s0, s0, 1
						addi t2, t2, 1
						j movetoBG_loop2
						movetoBG_loop2_end:
						addi t0, t0, 1
						addi s1, s1, 304
						addi s0, s0, 304
						j movetoBG_loop1 
				movetoBG_loop1_end:
				mjal(undrawtile)
				
				lw s0, 0(sp)
					lw s1, 4(sp)
					lw t0, 8(sp)
					lw t1, 12(sp)
					lw t2, 16(sp)
					lw t3, 20(sp)
					lw t4, 24(sp)
					lw ra, 28(sp)
					lw t5, 32(sp)
					addi sp, sp, 36
					
				jalr zero, ra, 0

			removefromBG1:
				addi sp, sp, -32
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw t0, 8(sp)
					sw t1, 12(sp)
					sw t2, 16(sp)
					sw t3, 20(sp)
					sw t4, 24(sp)
					sw s2, 28(sp)
				
				mv s0, a0
				li s1, 0x00025800 #ff3000000
				add s1, a0, s1
				li s2, 0x00012C00
				add s2, a0, s2
				li t0, 0
				li t1, 16
				removefromBG_loop1:
					beq t0, t1 removefromBG_loop1_end
					li t2, 0
					li t3, 16
					removefromBG_loop2:
						beq t2, t3, removefromBG_loop2_end
						lb t4, 0(s1)
						sb t4, 0(s2)
						#lb t4, 0(s2)
						#sb t4, 0(s0)
						addi s1, s1, 1
						addi s2, s2, 1
						addi s0, s0, 1
						addi t2, t2, 1
						j removefromBG_loop2
						removefromBG_loop2_end:
						addi t0, t0, 1
						addi s1, s1, 304
						addi s0, s0, 304
						addi s2, s2, 304
						j removefromBG_loop1 
				removefromBG_loop1_end:
				
				lw s0, 0(sp)
					lw s1, 4(sp)
					lw t0, 8(sp)
					lw t1, 12(sp)
					lw t2, 16(sp)
					lw t3, 20(sp)
					lw t4, 24(sp)
					lw s2, 28(sp)
					addi sp, sp, 32
					
				jalr zero, ra, 0
	initializeBorder:
		addi sp, sp, -4
		sw ra, 0(sp)
		la a0, selectborder1
		lw a1, selectborderpalette
		jal uncompress
		la t0, selectborderaddress
		sw a0, 0(t0)
		la a0, selectborder2
		jal uncompress
		lw ra, 0(sp)
		addi sp, sp, 4
		jalr zero, ra, 0
	initializeFont:
		addi sp, sp, -4
		sw ra, 0(sp)
		
		la t2, font16_16
		lw a1, font16_16Palette
		lw t0 VRAMPOINTER
		la t1, font16_16address
		sw t0, 0(t1)
		li t0, 0
		li t1 256
		fontuncompressloop:
		beq t0, t1, fontuncompressloopEND
		mv a0, t2
		jal uncompress
		addi t0, t0, 1
		addi t2, t2, 64
		j fontuncompressloop
		fontuncompressloopEND:
		lw ra, 0(sp)
		addi sp, sp, 4
		jalr zero, ra, 0

	initializeSprites:
		addi sp, sp, -4
		sw ra, 0(sp)
		
		la a0, playerCursor
		lw a1, playerCursorPalette
		jal uncompress
		la t0, playerCursorAddress
		sw a0, 0(t0)

		la a0, CPUCursor
		lw a1, CPUCursorPalette
		jal uncompress
		la t0, CPUCursorAddress
		sw a0, 0(t0)

		la a0, playerpiece1
		lw a1, playerpiece1palette
		jal uncompress
		la t0, playerpiece1address
		sw a0, 0(t0)

		la a0, playerpiece1dame
		lw a1, playerpiece1damepalette
		jal uncompress
		la t0, playerpiece1dameaddress
		sw a0, 0(t0)

		la a0, playerpiece2
		lw a1, playerpiece2palette
		jal uncompress
		la t0, playerpiece2address
		sw a0, 0(t0)

		la a0, playerpiece2dame
		lw a1, playerpiece2damepalette
		jal uncompress
		la t0, playerpiece2dameaddress
		sw a0, 0(t0)

		la a0, playerpiece3
		lw a1, playerpiece3palette
		jal uncompress
		la t0, playerpiece3address
		sw a0, 0(t0)

		la a0, playerpiece3dame
		lw a1, playerpiece3damepalette
		jal uncompress
		la t0, playerpiece3dameaddress
		sw a0, 0(t0)

		
		la a0, cpupiece1
		lw a1, cpupiece1palette
		jal uncompress
		la t0, cpupiece1address
		sw a0, 0(t0)

		la a0, cpupiece1dame
		lw a1, cpupiece1damepalette
		jal uncompress
		la t0, cpupiece1dameaddress
		sw a0, 0(t0)

		la a0, cpupiece2
		lw a1, cpupiece2palette
		jal uncompress
		la t0, cpupiece2address
		sw a0, 0(t0)

		la a0, cpupiece2dame
		lw a1, cpupiece2damepalette
		jal uncompress
		la t0, cpupiece2dameaddress
		sw a0, 0(t0)

		la a0, cpupiece3
		lw a1, cpupiece3palette
		jal uncompress
		la t0, cpupiece3address
		sw a0, 0(t0)

		la a0, cpupiece3dame
		lw a1, cpupiece3damepalette
		jal uncompress
		la t0, cpupiece3dameaddress
		sw a0, 0(t0)

		lw ra, 0(sp)
		addi sp, sp, 4
		jalr zero, ra, 0

	initializeMainMenu:
		addi sp, sp, -4
		sw ra, 0(sp)
		
		la t2, menu1
		lw a1, menupalette
		lw t0 VRAMPOINTER
		la t1, menu1address
		sw t0, 0(t1)
		li t0, 0
		li t1 34
		menu1loop:
		beq t0, t1, menu1loopEND
		mv a0, t2
		lw a1, menupalette
		jal uncompress
		addi t0, t0, 1
		addi t2, t2, 64
		j menu1loop
		menu1loopEND:
		la t2, menu2
		lw a1, menupalette
		lw t0 VRAMPOINTER
		la t1, menu2address
		sw t0, 0(t1)
		li t0, 0
		li t1 108
		menu2loop:
		beq t0, t1, menu2loopEND
		mv a0, t2
		lw a1, menupalette
		jal uncompress
		addi t0, t0, 1
		addi t2, t2, 64
		j menu2loop
		menu2loopEND:
		lw ra, 0(sp)
		addi, sp, sp, 4
		jalr zero, ra, 0

	showMenu:
		addi sp, sp, -80
					sw s0, 0(sp)
					sw s1, 4(sp)
					sw s2, 8(sp)
					sw s3, 12(sp)
					sw s4, 16(sp)
					sw s5, 20(sp)
					sw s6, 24(sp)
					sw s7, 28(sp)
					sw s8, 32(sp)
					sw s9, 36(sp)
					sw s10, 40(sp)
					sw s11, 44(sp)
					sw t0, 48(sp)
					sw t1, 52(sp)
					sw t2, 56(sp)
					sw t3, 60(sp)
					sw t4, 64(sp)
					sw t5, 68(sp)
				 	sw t6, 72(sp)
					sw ra, 76(sp)

		li t0, 0
		li t1, 2
		la t5, menu1address
		lw t5, 0(t5)
		showmenuloop1:
			beq t0, t1, showmenuloop1END
			li t2, 0
			li t3, 17
			showmenuloop2:
				beq t2, t3, showmenuloop2END
				mv a0, t2
				mv a1, t0
				li t4, 16
				mul a0, a0, t4
				mul a1, a1, t4
				addi a1, a1, 32
				addi a0, a0, 24
				mjal(getaddress)
				mv a1, a0
				mv a0, t5
				mjal(drawtileBG)
				addi t5, t5, 256		
				addi t2, t2, 1
				j showmenuloop2
			showmenuloop2END:
			addi t0, t0, 1
			j showmenuloop1
		showmenuloop1END:

		li t0, 0
		li t1, 9
		la t5, menu2address
		lw t5, 0(t5)
		showmenuloop21:
			beq t0, t1, showmenuloop21END
			li t2, 0
			li t3, 12
			showmenuloop22:
				beq t2, t3, showmenuloop22END
				mv a0, t2
				mv a1, t0
				li t4, 16
				mul a0, a0, t4
				mul a1, a1, t4
				addi a1, a1, 96
				addi a0, a0, 128
				mjal(getaddress)
				mv a1, a0
				mv a0, t5
				mjal(drawtileBG)
				addi t5, t5, 256		
				addi t2, t2, 1
				j showmenuloop22
			showmenuloop22END:
			addi t0, t0, 1
			j showmenuloop21
		showmenuloop21END:

		j MAIN

		SOUND:
			addi a1,a1,320
			li t0, 100
			bge s0,t0,PULA
			addi a1,a1,195
		PULA:	
			li a7, 31	#syscall for midi
			ecall
			jalr zero, ra, 0

		SLEEP:
			addi a0,a0,10
			li a7, 32	#syscall for sleep
			ecall
			jalr zero, ra, 0

		MAIN:
			lw s0, CONT		#quant de notas
			lw s1, INIT		#nota inicial
			la s2, NOTAS		#notas
			la s3, DURACAO		#duracoes
			la s4, DELAY		#delay
			la s5, VOLUME		#volume
			la s6, INSTRUMENTO	#instrumento
		LOOP1:
			sound(s1,s2,s3,s6,s5)
			sleep(s4)
			looptecladinholindinho:
			li t1,0xFF200000
			lw t0,0(t1)
			andi t0,t0,0x0001		# Le bit de Controle Teclado
				#beq t0,zero,looptecladinholindinho   	   	# Se nÔøΩo hÔøΩ tecla pressionada PULA
				lw t2,4(t1)
				li t0, 101
				beq t2, t0, DEPOIS
			beqz s0, DEPOIS

			addi s0, s0, -1
			addi s2, s2, 4
			addi s3, s3, 4
			addi s4, s4, 4
			addi s5, s5, 4
			#addiu $s6, $s6, 4

			j LOOP1
		DEPOIS:	
			lw s0, 0(sp)
						lw s1, 4(sp)
						lw s2, 8(sp)
						lw s3, 12(sp)
						lw s4, 16(sp)
						lw s5, 20(sp)
						lw s6, 24(sp)
						lw s7, 28(sp)
						lw s8, 32(sp)
						lw s9, 36(sp)
						lw s10, 40(sp)
						lw s11, 44(sp)
						lw t0, 48(sp)
						lw t1, 52(sp)
						lw t2, 56(sp)
						lw t3, 60(sp)
						lw t4, 64(sp)
						lw t5, 68(sp)
						lw t6, 72(sp)
						lw ra, 76(sp)
						addi sp, sp 80
					jalr zero,ra, 0

	# a0 = char
	# a1 = address to draw
	drawChar:
		addi sp, sp, -8
		sw t0, 0(sp)
		sw ra, 4(sp)
		lw t0 font16_16address
		slli a0, a0, 8
		add a0, t0, a0
		mjal(drawtileBG)
		lw t0, 0(sp)
		lw ra, 4(sp)
		addi sp, sp, 8
		jalr zero ra 0

	# a0 = address to read
	# a1 = number of chars 
	# a2 = address to draw 
	drawString:
		addi sp, sp, -20
		sw s0, 0(sp)
		sw s1, 4(sp)
		sw t0, 8(sp)
		sw t1, 12(sp)
		sw ra, 16(sp)
		
		mv s0, a0
		mv s1, a1
		mv a1, a2
		li t0, 0
		
		drawStringloop:
		beq t0, s1, drawStringloopEND
		lw a0, font16_16address
		lb t1, 0(s0)
		slli t1, t1, 8
		add a0, t1, a0
		mjal(drawtileBG)
		addi s0, s0, 1
		addi a1, a1, 16
		addi t0, t0, 1
		j drawStringloop
		drawStringloopEND:
		lw s0, 0(sp)
		lw s1, 4(sp)
		lw t0, 8(sp)
		lw t1, 12(sp)
		lw ra, 16(sp)
		addi sp, sp, 20
		jalr zero, ra, 0
			
	drawBoardBG:
		addi sp, sp, -4
		sw ra, 0(sp)
		
		la t2, boardBG
		lw a1, boardBGPalette
		lw t0 VRAMPOINTER
		la t1, boardBG_address
		sw t0, 0(t1)
		li t0, 0
		li t1 300
		bguncompressloop:
		beq t0, t1, bguncompressloopEND
		mv a0, t2
		lw a1, boardBGPalette
		jal uncompress
		addi t0, t0, 1
		addi t2, t2, 64
		j bguncompressloop
		bguncompressloopEND:

		
		#for(i=0 i<15 i++)
		#	for(j=0 j<20 j++)
		#	getcoordinates(j*16,i*16)
		#	drawtile
		
		li t0, 0
		li t1, 10
		la t5, boardBG_address
		lw t5, 0(t5)
		drawBoardBGloop1:
			beq t0, t1, drawBoardBGloop1END
			li t2, 0
			li t3, 20
			drawBoardBGloop2:
				beq t2, t3, drawBoardBGloop2END
				mv a0, t2
				mv a1, t0
				li t4, 16
				mul a0, a0, t4
				mul a1, a1, t4
				addi a1, a1, 30
				mjal(getaddress)
				li t4, 0x12C00
				add a0,a0,t4
				mv a1, a0
				mv a0, t5
				mjal(drawtileBG)
				li t4, 0x12C00
				add a1, a1, t4
				mv a0, t5
				mjal(drawtileBG)
				addi t5, t5, 256		
				addi t2, t2, 1
				j drawBoardBGloop2
			drawBoardBGloop2END:
			addi t0, t0, 1
			j drawBoardBGloop1
		drawBoardBGloop1END:
		lw ra, 0(sp)
		addi sp, sp, 4
		jalr zero, ra, 0
			
			
			#input: a0 (address)
			#output: a0 (x)
			#	 a1 (y)
			getcoordinates:
				addi sp, sp, -12
				sw t0, 0(sp)
				sw t1, 4(sp)
				sw t2, 8(sp)
				li t0, 0x0001FFFF #mask relevant bits
				and a0, a0, t0
				li t0, 320
				div t1, a0, t0
				rem t2, a0, t0
				mv a1, t1
				mv a0, t2
				lw t0, 0(sp)
				lw t1, 4(sp)
				lw t2, 8(sp)
				addi sp, sp, 12
				jr ra


			#input: a0 (x)
			#	 a1 (y)
			#output: ao (address)
			getaddress:
				addi sp, sp, -4
				sw t0, 0(sp)
				li t0, 320
				mul a1, a1, t0
				add a1, a1, a0
				mv a0, a1
				li t0, 0xff000000
				add a0, a0, t0
				lw t0, 0(sp)
				addi sp, sp, 4
				jr ra
				
			clearScreen:
				li      t1, VGAADDRESSINI       # Memoria VGA
			   	li 		t2, VGAADDRESSFIM
			   	lw 		a0, COLOR_PALETTE
		    	andi	a0, a0, 0x00FF
		    	li 		t0, 0x01010101
		    	mul		a0, t0, a0
		    	#li t3, 0xff012C00
		    #	li t4, 0xff025800

				forCLS:	beq     t1, t2, fimCLS
						sw    	a0, 0(t1)
			#			sw      a0, 0(t3)
			#			sw      a0, 0(t4)
				    	addi    t1, t1, 4
				   # 	addi	t3, t3, 4
				   # 	addi    t4, t4, 4
				    	j       forCLS
				    	
				fimCLS:	jalr 	zero,ra,0

			initialclearScreen:
				li      t1, VGAADDRESSINI       # Memoria VGA
			   	li 		t2, VGAADDRESSFIM
			   	lw 		a0, COLOR_PALETTE
		    	andi	a0, a0, 0x00FF
		    	li 		t0, 0x01010101
		    	mul		a0, t0, a0
		    	li t3, 0xff012C00
		    	li t4, 0xff025800

				initialforCLS:	beq     t1, t2, initialfimCLS
						sw    	a0, 0(t1)
						sw      a0, 0(t3)
						sw      a0, 0(t4)
				    	addi    t1, t1, 4
			 			addi	t3, t3, 4
					 	addi    t4, t4, 4
				    	j       initialforCLS
				    	
				initialfimCLS:	jalr 	zero,ra,0

			clearScreen2:
				li      t1, VGAADDRESSINI       # Memoria VGA
			   	li 		t2, VGAADDRESSFIM
			   	la 		a0, COLOR_PALETTE
			   	lb      a0, 3(a0)
			   	andi    a0, a0, 0x00FF
		    	li 		t0, 0x01010101
		    	mul		a0, t0, a0


				forCLS2:	beq     t1, t2, fimCLS2
						sw    	a0, 0(t1)
				    	addi    t1, t1, 4
				    	j       forCLS2
				    	
				fimCLS2:	jalr 	zero,ra,0
				
			copyBG3to1:
				li t1, VGAADDRESSINI       # Memoria VGA
			   	li t2, VGAADDRESSFIM
			    	li t3, 0xff025800

				copyloop:	
					beq t1, t2, copyloopEND
					lw a0, 0(t3)
					sw a0, 0(t1)
				    	addi t1, t1, 4
				    	addi t3, t3, 4
				    	j  copyloop
				    	
				copyloopEND:	jalr 	zero,ra,0
			showloading:
				la t0, loading
				li t1, 0xff0096A0
				li t4, 4
				li t3, 0
			showloadingloop:
				beq t3, t4, showloadingEND
				lw t2, 0(t0)
				sw t2, 0(t1)
				lw t2, 4(t0)
				sw t2, 4(t1)
				lw t2, 8(t0)
				sw t2, 8(t1)
				lw t2, 12(t0)
				sw t2, 12(t1)
				lw t2, 16(t0)
				sw t2, 16(t1)
				lw t2, 20(t0)
				sw t2, 20(t1)
				lw t2, 24(t0)
				sw t2, 24(t1)
				addi t0, t0, 28
				addi t1, t1, 320
				addi t3, t3, 1
				j showloadingloop
			showloadingEND:
				jalr zero, ra, 0
			rainbowcls:
				li t0, 0x070707
				li t1, 0x383838
				li t2, 0xC0C0C0
				li t3, 0xFFFFFF
				li t4, 19200
				li t5, 0
				mv t6, a0
				rainbowloop:
					beq t5, t4, rainbowloop_end
					sw t0, 0(t6)
					sw t1, 4(t6)
					sw t2, 8(t6)
					sw t3, 12(t6)
					addi t6, t6, 16
					addi t5, t5, 1
					j rainbowloop
					rainbowloop_end:
					jalr zero,ra,0



			EXIT:
				li a7, 10
				ecall
